{"version":3,"file":"extension.js","mappings":"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","sources":[".././src/extension.ts","../external node-commonjs \"child_process\"","../external commonjs \"vscode\"","../external node-commonjs \"os\"","../external node-commonjs \"fs\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.activate = activate;\nexports.deactivate = deactivate;\nconst vscode = __importStar(require(\"vscode\"));\nconst child_process = __importStar(require(\"child_process\"));\nconst path = __importStar(require(\"path\"));\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\n// Store a map of panel IDs to their associated child processes\nconst activeProcesses = new Map();\nfunction activate(context) {\n    context.subscriptions.push(vscode.commands.registerCommand(\"codeRunner.openPanel\", () => {\n        const panel = vscode.window.createWebviewPanel(\"codeRunner\", \"Code Runner\", vscode.ViewColumn.One, {\n            enableScripts: true,\n            retainContextWhenHidden: true,\n        });\n        // Generate a unique ID for this panel to manage its child process\n        // Using a simple timestamp for a unique ID within the session\n        const panelId = `panel-${Date.now()}-${Math.random().toString(36).substring(7)}`;\n        const activeEditor = vscode.window.activeTextEditor;\n        let initialCode = \"\";\n        let initialLanguage = \"cpp\";\n        if (activeEditor) {\n            initialCode = activeEditor.document.getText();\n            const fileName = activeEditor.document.fileName;\n            if (fileName.endsWith(\".cpp\") || fileName.endsWith(\".c\")) {\n                initialLanguage = \"cpp\";\n            }\n            else if (fileName.endsWith(\".py\")) {\n                initialLanguage = \"python\";\n            }\n            else if (fileName.endsWith(\".c\")) {\n                initialLanguage = \"c\";\n            }\n        }\n        panel.webview.html = getWebviewContent(initialCode, initialLanguage);\n        panel.webview.onDidReceiveMessage(async (message) => {\n            if (message.command === \"runCode\") {\n                const language = message.language;\n                const fileName = message.fileName;\n                // Clean up any previous process associated with this panel\n                if (activeProcesses.has(panelId)) {\n                    activeProcesses.get(panelId)?.kill('SIGKILL'); // Use SIGKILL for more aggressive termination\n                    activeProcesses.delete(panelId);\n                    panel.webview.postMessage({ command: \"removeInputPrompt\" }); // Ensure prompt is gone\n                }\n                if (!fileName) {\n                    panel.webview.postMessage({\n                        command: \"appendOutput\",\n                        output: \"❌ Error: Please enter a file name (e.g., main.cpp).\\n\",\n                    });\n                    return;\n                }\n                panel.webview.postMessage({\n                    command: \"clearOutput\", // Clear previous run output\n                });\n                panel.webview.postMessage({\n                    command: \"appendOutput\",\n                    output: \"Running code...\\n\",\n                });\n                try {\n                    const process = await runCodeProcess(language, fileName);\n                    activeProcesses.set(panelId, process);\n                    process.stdout.on(\"data\", (data) => {\n                        const chunk = data.toString();\n                        panel.webview.postMessage({ command: \"appendOutput\", output: chunk });\n                        // Check if the program is waiting for input (heuristic)\n                        // More specific check for common interactive prompts\n                        const lowerChunk = chunk.toLowerCase();\n                        const requiresInput = lowerChunk.includes(\"enter\") || // \"Enter Roll Number\"\n                            lowerChunk.includes(\"subject\") && lowerChunk.includes(\":\") || // \"Subject 1:\"\n                            lowerChunk.includes(\"name:\") || // \"Enter Name:\"\n                            lowerChunk.includes(\"students:\"); // \"Enter number of students:\"\n                        if (requiresInput && process.stdin.writable) {\n                            panel.webview.postMessage({ command: \"requestInput\" });\n                        }\n                    });\n                    process.stderr.on(\"data\", (data) => {\n                        const chunk = data.toString();\n                        panel.webview.postMessage({ command: \"appendOutput\", output: `Error: ${chunk}` });\n                        if (process.stdin.writable) { // Even on error, it might wait for input\n                            panel.webview.postMessage({ command: \"requestInput\" });\n                        }\n                    });\n                    process.on(\"close\", (code) => {\n                        panel.webview.postMessage({ command: \"removeInputPrompt\" }); // Remove input field on close\n                        activeProcesses.delete(panelId);\n                        if (code !== 0) {\n                            panel.webview.postMessage({\n                                command: \"appendOutput\",\n                                output: `\\nProgram exited with code ${code}.`,\n                            });\n                        }\n                        else {\n                            panel.webview.postMessage({\n                                command: \"appendOutput\",\n                                output: `\\nProgram finished.`,\n                            });\n                        }\n                    });\n                    process.on(\"error\", (spawnErr) => {\n                        panel.webview.postMessage({\n                            command: \"appendOutput\",\n                            output: `\\n❌ Failed to run program: ${spawnErr.message}`,\n                        });\n                        panel.webview.postMessage({ command: \"removeInputPrompt\" });\n                        activeProcesses.delete(panelId);\n                    });\n                }\n                catch (err) {\n                    panel.webview.postMessage({\n                        command: \"appendOutput\",\n                        output: `\\n❌ Error: ${err.message || err.toString()}`,\n                    });\n                    panel.webview.postMessage({ command: \"removeInputPrompt\" });\n                    activeProcesses.delete(panelId);\n                }\n            }\n            else if (message.command === \"clearOutput\") {\n                panel.webview.postMessage({ command: \"clearOutput\" });\n                panel.webview.postMessage({ command: \"removeInputPrompt\" });\n                // Kill any active process if clearing output\n                if (activeProcesses.has(panelId)) {\n                    activeProcesses.get(panelId)?.kill('SIGKILL');\n                    activeProcesses.delete(panelId);\n                }\n            }\n            else if (message.command === \"sendInput\") {\n                const input = message.input;\n                const process = activeProcesses.get(panelId);\n                if (process && process.stdin && !process.stdin.writableEnded) {\n                    // Append input to output display *before* sending to stdin\n                    // This makes it feel like the user is typing directly into the console\n                    panel.webview.postMessage({ command: \"appendOutput\", output: input + \"\\n\" });\n                    process.stdin.write(input + \"\\n\");\n                    // Immediately hide the prompt as input is sent, it will reappear if needed\n                    panel.webview.postMessage({ command: \"removeInputPrompt\" });\n                }\n                else {\n                    panel.webview.postMessage({ command: \"appendOutput\", output: \"\\nNo active program to send input to or stdin not writable.\\n\" });\n                    panel.webview.postMessage({ command: \"removeInputPrompt\" });\n                }\n            }\n        });\n        // Handle panel closing: kill the associated process\n        panel.onDidDispose(() => {\n            if (activeProcesses.has(panelId)) {\n                activeProcesses.get(panelId)?.kill('SIGKILL');\n                activeProcesses.delete(panelId);\n            }\n        });\n    }));\n}\nfunction getWebviewContent(initialCode, initialLanguage) {\n    return `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Code Runner</title>\n        <style>\n            * {\n                box-sizing: border-box;\n                margin: 0;\n                padding: 0;\n            }\n\n            body {\n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n                background: #0d1117;\n                color: #c9d1d9;\n                min-height: 100vh;\n                display: flex;\n                flex-direction: column;\n                line-height: 1.5;\n            }\n\n            .header {\n                background: #161b22;\n                border-bottom: 1px solid #30363d;\n                padding: 20px 32px;\n            }\n\n            .header h1 {\n                font-size: 20px;\n                font-weight: 600;\n                color: #c9d1d9;\n                display: flex;\n                align-items: center;\n                gap: 12px;\n            }\n\n            .logo {\n                width: 24px;\n                height: 24px;\n                background: #58a6ff;\n                border-radius: 4px;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                color: #0d1117;\n                font-size: 12px;\n                font-weight: 700;\n            }\n\n            .container {\n                flex: 1;\n                max-width: 800px;\n                width: 100%;\n                margin: 0 auto;\n                padding: 32px;\n                display: flex;\n                flex-direction: column;\n                gap: 24px;\n            }\n\n            .controls {\n                background: #161b22;\n                border: 1px solid #30363d;\n                border-radius: 8px;\n                padding: 24px;\n                display: flex;\n                flex-direction: column;\n                gap: 16px;\n            }\n\n            .control-grid {\n                display: grid;\n                grid-template-columns: 1fr 140px 100px;\n                gap: 16px;\n                align-items: end;\n            }\n\n            .field {\n                display: flex;\n                flex-direction: column;\n                gap: 6px;\n            }\n\n            .label {\n                font-size: 13px;\n                font-weight: 500;\n                color: #8b949e;\n            }\n\n            .input, .select {\n                height: 40px;\n                padding: 8px 12px;\n                border: 1px solid #30363d;\n                border-radius: 6px;\n                font-size: 14px;\n                background: #0d1117;\n                color: #c9d1d9;\n                transition: border-color 0.2s ease;\n                outline: none;\n                font-family: ui-monospace, 'SF Mono', Monaco, 'Cascadia Code', monospace;\n            }\n\n            .input:focus, .select:focus {\n                border-color: #58a6ff;\n                box-shadow: inset 0 0 0 1px #58a6ff;\n            }\n\n            .run-button, .clear-button {\n                height: 40px;\n                color: #ffffff;\n                border: none;\n                border-radius: 6px;\n                font-size: 14px;\n                font-weight: 500;\n                cursor: pointer;\n                transition: background-color 0.2s ease;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                gap: 6px;\n                padding: 0 16px;\n            }\n\n            .run-button {\n                background: #238636;\n            }\n\n            .run-button:hover {\n                background: #2ea043;\n            }\n\n            .run-button:active {\n                background: #196c2e;\n            }\n\n            .clear-button {\n                background: #6a737d;\n            }\n\n            .clear-button:hover {\n                background: #8b949e;\n            }\n\n            .clear-button:active {\n                background: #545d68;\n            }\n\n            .output-section {\n                flex: 1;\n                background: #161b22;\n                border: 1px solid #30363d;\n                border-radius: 8px;\n                display: flex;\n                flex-direction: column;\n                min-height: 400px;\n            }\n\n            .output-header {\n                padding: 16px 20px;\n                border-bottom: 1px solid #30363d;\n                background: #21262d;\n                border-radius: 8px 8px 0 0;\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n            }\n\n            .output-title {\n                font-size: 14px;\n                font-weight: 600;\n                color: #c9d1d9;\n            }\n\n            .output-content {\n                flex: 1;\n                padding: 20px;\n                font-family: ui-monospace, 'SF Mono', Monaco, 'Cascadia Code', monospace;\n                font-size: 13px;\n                line-height: 1.6;\n                color: #c9d1d9;\n                background: #0d1117;\n                white-space: pre-wrap; /* Preserve whitespace and newlines */\n                word-wrap: break-word;\n                overflow-y: auto;\n                border-radius: 0 0 8px 8px;\n                display: flex;\n                flex-direction: column;\n            }\n\n            .output-content:empty:not(:has(.input-prompt-line))::before {\n                content: 'Run your code to see output here...';\n                color: #8b949e;\n                font-style: italic;\n            }\n\n            .play-icon {\n                width: 0;\n                height: 0;\n                border-left: 6px solid currentColor;\n                border-top: 4px solid transparent;\n                border-bottom: 4px solid transparent;\n                margin-left: 1px;\n            }\n\n            .input-prompt-line {\n                display: flex;\n                align-items: center;\n                margin-top: auto; /* Pushes input field to the bottom */\n                width: 100%;\n                box-sizing: border-box;\n            }\n\n            .input-prompt-line input {\n                flex-grow: 1;\n                padding: 5px 8px;\n                border: 1px solid #58a6ff;\n                border-radius: 4px;\n                background-color: #0d1117;\n                color: #ffffff;\n                font-family: ui-monospace, 'SF Mono', Monaco, 'Cascadia Code', monospace;\n                font-size: 13px;\n                outline: none;\n                margin-left: 5px;\n            }\n\n            .input-prompt-line input:focus {\n                box-shadow: 0 0 0 1px #58a6ff;\n            }\n\n            .input-prompt-prefix {\n                color: #58a6ff;\n                font-weight: bold;\n            }\n\n            @media (max-width: 640px) {\n                .container {\n                    padding: 20px 16px;\n                }\n\n                .control-grid {\n                    grid-template-columns: 1fr;\n                    gap: 16px;\n                }\n\n                .controls {\n                    padding: 20px;\n                }\n\n                .header {\n                    padding: 16px 20px;\n                }\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"header\">\n            <h1>\n                <div class=\"logo\">CR</div>\n                Code Runner\n            </h1>\n        </div>\n\n        <div class=\"container\">\n            <div class=\"controls\">\n                <div class=\"control-grid\">\n                    <div class=\"field\">\n                        <label class=\"label\">File Name</label>\n                        <input type=\"text\" class=\"input\" id=\"fileName\" placeholder=\"main.cpp\" value=\"${initialLanguage === 'cpp' ? 'main.cpp' : initialLanguage === 'c' ? 'main.c' : 'main.py'}\" />\n                    </div>\n                    <div class=\"field\">\n                        <label class=\"label\">Language</label>\n                        <select class=\"select\" id=\"language\">\n                            <option value=\"cpp\" ${initialLanguage === 'cpp' ? 'selected' : ''}>C++</option>\n                            <option value=\"c\" ${initialLanguage === 'c' ? 'selected' : ''}>C</option>\n                            <option value=\"python\" ${initialLanguage === 'python' ? 'selected' : ''}>Python</option>\n                        </select>\n                    </div>\n                    <button class=\"run-button\" onclick=\"runCode()\">\n                        <div class=\"play-icon\"></div>\n                        Run\n                    </button>\n                </div>\n            </div>\n\n            <div class=\"output-section\">\n                <div class=\"output-header\">\n                    <div class=\"output-title\">Output</div>\n                    <button class=\"clear-button\" onclick=\"clearOutput()\">Clear</button>\n                </div>\n                <div class=\"output-content\" id=\"output\">\n                    </div>\n            </div>\n        </div>\n\n        <script>\n            const vscode = acquireVsCodeApi();\n            const outputElement = document.getElementById(\"output\");\n\n            document.getElementById('language').addEventListener('change', (event) => {\n                const language = event.target.value;\n                const fileNameInput = document.getElementById('fileName');\n                if (language === 'cpp') {\n                    fileNameInput.value = 'main.cpp';\n                } else if (language === 'c') {\n                    fileNameInput.value = 'main.c';\n                } else if (language === 'python') {\n                    fileNameInput.value = 'main.py';\n                }\n            });\n\n            function runCode() {\n                const fileName = document.getElementById(\"fileName\").value;\n                const language = document.getElementById(\"language\").value;\n\n                if (!fileName.trim()) {\n                    outputElement.innerHTML = \"❌ Please enter a file name.\";\n                    return;\n                }\n\n                outputElement.innerHTML = \"\"; // Clear existing output and input prompt\n                vscode.postMessage({ command: \"runCode\", code: \"\", language, fileName });\n            }\n\n            function clearOutput() {\n                outputElement.innerHTML = \"\"; // Clear HTML content\n                vscode.postMessage({ command: \"clearOutput\" });\n            }\n\n            function createInputPrompt() {\n                let inputPromptLine = outputElement.querySelector('.input-prompt-line');\n                if (!inputPromptLine) { // Only create if it doesn't exist\n                    inputPromptLine = document.createElement('div');\n                    inputPromptLine.className = 'input-prompt-line';\n                    inputPromptLine.innerHTML = \\`\n                        <span class=\"input-prompt-prefix\">&gt;</span>\n                        <input type=\"text\" class=\"program-input-field\" placeholder=\"\">\n                    \\`;\n                    outputElement.appendChild(inputPromptLine);\n                }\n\n                const inputField = inputPromptLine.querySelector('.program-input-field');\n                if (inputField) {\n                    inputField.value = ''; // Clear previous input\n                    inputField.disabled = false; // Enable if it was disabled\n                    inputField.focus(); // Focus the input field immediately\n\n                    // Ensure listener is only added once\n                    if (!inputField.dataset.listenerAdded) {\n                        inputField.dataset.listenerAdded = 'true'; // Mark as added\n                        inputField.addEventListener('keydown', function(event) {\n                            if (event.key === 'Enter') {\n                                const inputValue = inputField.value;\n                                inputField.disabled = true; // Disable input after sending\n                                vscode.postMessage({ command: 'sendInput', input: inputValue });\n                                // The input will be echoed by the extension's appendOutput, so no need to update DOM here directly\n                            }\n                        });\n                    }\n                }\n                // Scroll to bottom to show input field\n                outputElement.scrollTop = outputElement.scrollHeight;\n            }\n\n            function removeInputPrompt() {\n                const inputPromptLine = outputElement.querySelector('.input-prompt-line');\n                if (inputPromptLine) {\n                    inputPromptLine.remove();\n                }\n            }\n\n            window.addEventListener(\"message\", (event) => {\n                const message = event.data;\n                switch (message.command) {\n                    case \"appendOutput\":\n                        // Create a span or div for each output chunk to maintain structure\n                        const outputSpan = document.createElement('span');\n                        outputSpan.textContent = message.output;\n                        // Before appending, remove the input prompt if it exists, then re-add if needed\n                        const existingInputPrompt = outputElement.querySelector('.input-prompt-line');\n                        if (existingInputPrompt) {\n                            outputElement.insertBefore(outputSpan, existingInputPrompt);\n                        } else {\n                            outputElement.appendChild(outputSpan);\n                        }\n                        // Explicitly add a newline after the prompt when input is requested\n                        // This fixes the cramped output like \"Roll Number:Nishant\"\n                        if (message.output.includes(\"Enter Roll Number:\") || \n                            message.output.includes(\"Enter Name:\") ||\n                            message.output.includes(\"Subject \") && message.output.includes(\": \") ||\n                            message.output.includes(\"Enter number of students:\")) {\n                                outputElement.appendChild(document.createElement('br')); // Add a line break for visual separation\n                        }\n                        outputElement.scrollTop = outputElement.scrollHeight; // Scroll to bottom\n                        break;\n                    case \"clearOutput\":\n                        outputElement.innerHTML = \"\";\n                        break;\n                    case \"requestInput\":\n                        createInputPrompt();\n                        break;\n                    case \"removeInputPrompt\":\n                        removeInputPrompt();\n                        break;\n                }\n            });\n        </script>\n    </body>\n    </html>\n  `;\n}\n// Modified to return the child process, which will be managed by the panel's lifecycle\nasync function runCodeProcess(language, fileName) {\n    const tempDir = path.join(os.tmpdir(), \"vscode-code-runner-temp\");\n    if (!fs.existsSync(tempDir))\n        fs.mkdirSync(tempDir, { recursive: true });\n    const filePath = path.join(tempDir, fileName);\n    const workspaceFolders = vscode.workspace.workspaceFolders;\n    if (!workspaceFolders) {\n        throw new Error(\"No workspace folder is open. Please open a folder containing your code files.\");\n    }\n    const workspaceFilePath = path.join(workspaceFolders[0].uri.fsPath, fileName);\n    if (!fs.existsSync(workspaceFilePath)) {\n        throw new Error(`File \"${fileName}\" not found in workspace. Please ensure the file exists in your workspace folder.`);\n    }\n    // Read the content of the file from the user's workspace\n    const fileContent = fs.readFileSync(workspaceFilePath, 'utf8');\n    // Write the content to a temporary file for execution\n    fs.writeFileSync(filePath, fileContent);\n    return new Promise((resolve, reject) => {\n        let command;\n        let childProcess;\n        if (language === \"cpp\" || language === \"c\") {\n            const exePath = path.join(tempDir, path.parse(fileName).name + (os.platform() === \"win32\" ? \".exe\" : \"\"));\n            command = language === \"cpp\" ? \"g++\" : \"gcc\";\n            const fullCommand = `${command} \"${filePath}\" -o \"${exePath}\"`;\n            child_process.exec(fullCommand, { cwd: tempDir }, (err, stdout, stderr) => {\n                if (err) {\n                    try {\n                        fs.unlinkSync(filePath);\n                    }\n                    catch (e) { /* ignore */ }\n                    return reject(new Error(`Compilation failed:\\n${stderr || stdout || err.message}`));\n                }\n                const runCmd = os.platform() === \"win32\" ? `\"${exePath}\"` : exePath;\n                childProcess = child_process.spawn(runCmd, [], {\n                    cwd: tempDir,\n                    shell: true,\n                });\n                // Cleanup compiled executable and source file on process exit\n                childProcess.on('exit', () => {\n                    try {\n                        fs.unlinkSync(filePath);\n                        if (fs.existsSync(exePath))\n                            fs.unlinkSync(exePath);\n                    }\n                    catch (cleanupErr) {\n                        console.error(\"Cleanup error:\", cleanupErr);\n                    }\n                });\n                resolve(childProcess); // Resolve with the child process\n            });\n        }\n        else if (language === \"python\") {\n            command = \"python\";\n            childProcess = child_process.spawn(command, [filePath], {\n                cwd: tempDir,\n                shell: true,\n            });\n            // Cleanup source file on process exit\n            childProcess.on('exit', () => {\n                try {\n                    fs.unlinkSync(filePath);\n                }\n                catch (cleanupErr) {\n                    console.error(\"Cleanup error:\", cleanupErr);\n                }\n            });\n            resolve(childProcess); // Resolve with the child process\n        }\n        else {\n            reject(\"Language not supported.\");\n        }\n    });\n}\nfunction deactivate() {\n    // Kill any remaining active processes when the extension deactivates\n    activeProcesses.forEach(proc => {\n        try {\n            proc.kill('SIGKILL'); // Use SIGKILL for more aggressive termination\n        }\n        catch (e) {\n            console.error(\"Failed to kill process during deactivate:\", e);\n        }\n    });\n    activeProcesses.clear();\n    const tempDir = path.join(os.tmpdir(), \"vscode-code-runner-temp\");\n    if (fs.existsSync(tempDir)) {\n        try {\n            fs.rmSync(tempDir, { recursive: true, force: true });\n        }\n        catch (e) {\n            console.error(\"Failed to clean up temporary directory:\", e);\n        }\n    }\n}\n","module.exports = require(\"child_process\");","module.exports = require(\"vscode\");","module.exports = require(\"os\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["ownKeys","__createBinding","this","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","getOwnPropertyNames","ar","prototype","hasOwnProperty","call","length","mod","result","i","exports","activate","context","subscriptions","push","vscode","commands","registerCommand","panel","window","createWebviewPanel","ViewColumn","One","enableScripts","retainContextWhenHidden","panelId","Date","now","Math","random","toString","substring","activeEditor","activeTextEditor","initialCode","initialLanguage","document","getText","fileName","endsWith","webview","html","getWebviewContent","onDidReceiveMessage","async","message","command","language","activeProcesses","has","kill","delete","postMessage","output","process","tempDir","path","join","os","tmpdir","fs","existsSync","mkdirSync","recursive","filePath","workspaceFolders","workspace","Error","workspaceFilePath","uri","fsPath","fileContent","readFileSync","writeFileSync","Promise","resolve","reject","childProcess","exePath","parse","name","platform","fullCommand","child_process","exec","cwd","err","stdout","stderr","unlinkSync","e","runCmd","spawn","shell","on","cleanupErr","console","error","runCodeProcess","set","data","chunk","lowerChunk","toLowerCase","includes","stdin","code","spawnErr","input","writableEnded","write","onDidDispose","deactivate","forEach","proc","clear","rmSync","force","Map","module","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}