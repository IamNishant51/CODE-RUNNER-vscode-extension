{"version":3,"file":"extension.js","mappings":"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","sources":[".././src/extension.ts","../external node-commonjs \"child_process\"","../external commonjs \"vscode\"","../external node-commonjs \"os\"","../external node-commonjs \"fs\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.activate = activate;\nexports.deactivate = deactivate;\nconst vscode = __importStar(require(\"vscode\"));\nconst child_process = __importStar(require(\"child_process\"));\nconst path = __importStar(require(\"path\"));\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nfunction activate(context) {\n    context.subscriptions.push(vscode.commands.registerCommand(\"codeRunner.openPanel\", () => {\n        const panel = vscode.window.createWebviewPanel(\"codeRunner\", \"Code Runner\", // Title of the panel\n        vscode.ViewColumn.One, {\n            enableScripts: true,\n            retainContextWhenHidden: true, // Keep the state even when hidden\n        });\n        // Get the currently active editor's content and language\n        const activeEditor = vscode.window.activeTextEditor;\n        let initialCode = \"\";\n        let initialLanguage = \"cpp\"; // Default to C++\n        if (activeEditor) {\n            initialCode = activeEditor.document.getText();\n            const fileName = activeEditor.document.fileName;\n            if (fileName.endsWith(\".cpp\") || fileName.endsWith(\".c\")) {\n                initialLanguage = \"cpp\";\n            }\n            else if (fileName.endsWith(\".py\")) {\n                initialLanguage = \"python\";\n            }\n            else if (fileName.endsWith(\".c\")) {\n                initialLanguage = \"c\";\n            }\n        }\n        panel.webview.html = getWebviewContent(initialCode, initialLanguage);\n        panel.webview.onDidReceiveMessage(async (message) => {\n            if (message.command === \"runCode\") {\n                const code = message.code;\n                const language = message.language;\n                const fileName = message.fileName; // Get filename from webview\n                if (!fileName) {\n                    panel.webview.postMessage({\n                        command: \"showOutput\",\n                        output: \"❌ Error: Please enter a file name (e.g., main.cpp).\",\n                    });\n                    return;\n                }\n                panel.webview.postMessage({\n                    command: \"showOutput\",\n                    output: \"Running code...\", // Show a running indicator\n                });\n                try {\n                    const output = await runCodeWithInput(language, code, fileName);\n                    panel.webview.postMessage({ command: \"showOutput\", output });\n                }\n                catch (err) { // Keep any here for broader error catching from child_process\n                    panel.webview.postMessage({\n                        command: \"showOutput\",\n                        output: \"❌ Error: \" + (err.message || err.toString()),\n                    });\n                }\n            }\n        });\n    }));\n}\nfunction getWebviewContent(initialCode, initialLanguage) {\n    return `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Code Runner</title>\n        <style>\n            * {\n                box-sizing: border-box;\n                margin: 0;\n                padding: 0;\n            }\n            \n            body {\n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n                background: #0d1117;\n                color: #c9d1d9;\n                min-height: 100vh;\n                display: flex;\n                flex-direction: column;\n                line-height: 1.5;\n            }\n            \n            .header {\n                background: #161b22;\n                border-bottom: 1px solid #30363d;\n                padding: 20px 32px;\n            }\n            \n            .header h1 {\n                font-size: 20px;\n                font-weight: 600;\n                color: #c9d1d9;\n                display: flex;\n                align-items: center;\n                gap: 12px;\n            }\n            \n            .logo {\n                width: 24px;\n                height: 24px;\n                background: #58a6ff;\n                border-radius: 4px;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                color: #0d1117;\n                font-size: 12px;\n                font-weight: 700;\n            }\n            \n            .container {\n                flex: 1;\n                max-width: 800px;\n                width: 100%;\n                margin: 0 auto;\n                padding: 32px;\n                display: flex;\n                flex-direction: column;\n                gap: 24px;\n            }\n            \n            .controls {\n                background: #161b22;\n                border: 1px solid #30363d;\n                border-radius: 8px;\n                padding: 24px;\n            }\n            \n            .control-grid {\n                display: grid;\n                grid-template-columns: 1fr 140px 100px;\n                gap: 16px;\n                align-items: end;\n            }\n            \n            .field {\n                display: flex;\n                flex-direction: column;\n                gap: 6px;\n            }\n            \n            .label {\n                font-size: 13px;\n                font-weight: 500;\n                color: #8b949e;\n            }\n            \n            .input, .select {\n                height: 40px;\n                padding: 8px 12px;\n                border: 1px solid #30363d;\n                border-radius: 6px;\n                font-size: 14px;\n                background: #0d1117;\n                color: #c9d1d9;\n                transition: border-color 0.2s ease;\n                outline: none;\n                font-family: ui-monospace, 'SF Mono', Monaco, 'Cascadia Code', monospace;\n            }\n            \n            .input:focus, .select:focus {\n                border-color: #58a6ff;\n                box-shadow: inset 0 0 0 1px #58a6ff;\n            }\n            \n            .run-button {\n                height: 40px;\n                background: #238636;\n                color: #ffffff;\n                border: none;\n                border-radius: 6px;\n                font-size: 14px;\n                font-weight: 500;\n                cursor: pointer;\n                transition: background-color 0.2s ease;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                gap: 6px;\n                padding: 0 16px;\n            }\n            \n            .run-button:hover {\n                background: #2ea043;\n            }\n            \n            .run-button:active {\n                background: #196c2e;\n            }\n            \n            .output-section {\n                flex: 1;\n                background: #161b22;\n                border: 1px solid #30363d;\n                border-radius: 8px;\n                display: flex;\n                flex-direction: column;\n                min-height: 400px;\n            }\n            \n            .output-header {\n                padding: 16px 20px;\n                border-bottom: 1px solid #30363d;\n                background: #21262d;\n                border-radius: 8px 8px 0 0;\n            }\n            \n            .output-title {\n                font-size: 14px;\n                font-weight: 600;\n                color: #c9d1d9;\n            }\n            \n            .output-content {\n                flex: 1;\n                padding: 20px;\n                font-family: ui-monospace, 'SF Mono', Monaco, 'Cascadia Code', monospace;\n                font-size: 13px;\n                line-height: 1.6;\n                color: #c9d1d9;\n                background: #0d1117;\n                white-space: pre-wrap;\n                word-wrap: break-word;\n                overflow-y: auto;\n                border-radius: 0 0 8px 8px;\n            }\n            \n            .output-content:empty::before {\n                content: 'Run your code to see output here...';\n                color: #8b949e;\n                font-style: italic;\n            }\n            \n            .play-icon {\n                width: 0;\n                height: 0;\n                border-left: 6px solid currentColor;\n                border-top: 4px solid transparent;\n                border-bottom: 4px solid transparent;\n                margin-left: 1px;\n            }\n            \n            @media (max-width: 640px) {\n                .container {\n                    padding: 20px 16px;\n                }\n                \n                .control-grid {\n                    grid-template-columns: 1fr;\n                    gap: 16px;\n                }\n                \n                .controls {\n                    padding: 20px;\n                }\n                \n                .header {\n                    padding: 16px 20px;\n                }\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"header\">\n            <h1>\n                <div class=\"logo\">CR</div>\n                Code Runner\n            </h1>\n        </div>\n        \n        <div class=\"container\">\n            <div class=\"controls\">\n                <div class=\"control-grid\">\n                    <div class=\"field\">\n                        <label class=\"label\">File Name</label>\n                        <input type=\"text\" class=\"input\" id=\"fileName\" placeholder=\"main.cpp\" value=\"${initialLanguage === 'cpp' ? 'main.cpp' : initialLanguage === 'c' ? 'main.c' : 'main.py'}\" />\n                    </div>\n                    <div class=\"field\">\n                        <label class=\"label\">Language</label>\n                        <select class=\"select\" id=\"language\">\n                            <option value=\"cpp\" ${initialLanguage === 'cpp' ? 'selected' : ''}>C++</option>\n                            <option value=\"c\" ${initialLanguage === 'c' ? 'selected' : ''}>C</option>\n                            <option value=\"python\" ${initialLanguage === 'python' ? 'selected' : ''}>Python</option>\n                        </select>\n                    </div>\n                    <button class=\"run-button\" onclick=\"runCode()\">\n                        <div class=\"play-icon\"></div>\n                        Run\n                    </button>\n                </div>\n            </div>\n            \n            <div class=\"output-section\">\n                <div class=\"output-header\">\n                    <div class=\"output-title\">Output</div>\n                </div>\n                <div class=\"output-content\" id=\"output\"></div>\n            </div>\n        </div>\n\n        <script>\n            const vscode = acquireVsCodeApi();\n\n            document.getElementById('language').addEventListener('change', (event) => {\n                const language = event.target.value;\n                const fileNameInput = document.getElementById('fileName');\n                if (language === 'cpp') {\n                    fileNameInput.value = 'main.cpp';\n                } else if (language === 'c') {\n                    fileNameInput.value = 'main.c';\n                } else if (language === 'python') {\n                    fileNameInput.value = 'main.py';\n                }\n            });\n\n            function runCode() {\n                const fileName = document.getElementById(\"fileName\").value;\n                const language = document.getElementById(\"language\").value;\n                \n                if (!fileName.trim()) {\n                    document.getElementById(\"output\").textContent = \"❌ Please enter a file name.\";\n                    return;\n                }\n                \n                document.getElementById(\"output\").textContent = \"⏳ Running code...\";\n                vscode.postMessage({ command: \"runCode\", code: \"\", language, fileName });\n            }\n\n            window.addEventListener(\"message\", (event) => {\n                const message = event.data;\n                if (message.command === \"showOutput\") {\n                    document.getElementById(\"output\").textContent = message.output;\n                }\n            });\n        </script>\n    </body>\n    </html>\n  `;\n}\nasync function runCodeWithInput(language, code, fileName) {\n    // Since we're not getting code from the webview anymore, we need to read it from the file\n    const tempDir = path.join(os.tmpdir(), \"vscode-code-runner-temp\");\n    if (!fs.existsSync(tempDir))\n        fs.mkdirSync(tempDir, { recursive: true });\n    const filePath = path.join(tempDir, fileName);\n    // Check if the file exists in the workspace\n    const workspaceFolders = vscode.workspace.workspaceFolders;\n    if (!workspaceFolders) {\n        throw new Error(\"No workspace folder is open. Please open a folder containing your code files.\");\n    }\n    const workspaceFilePath = path.join(workspaceFolders[0].uri.fsPath, fileName);\n    if (!fs.existsSync(workspaceFilePath)) {\n        throw new Error(`File \"${fileName}\" not found in workspace. Please ensure the file exists in your workspace folder.`);\n    }\n    // Read the code from the workspace file\n    const fileCode = fs.readFileSync(workspaceFilePath, 'utf8');\n    fs.writeFileSync(filePath, fileCode);\n    return new Promise((resolve, reject) => {\n        let command;\n        if (language === \"cpp\" || language === \"c\") {\n            const exePath = path.join(tempDir, path.parse(fileName).name + (os.platform() === \"win32\" ? \".exe\" : \"\"));\n            command = language === \"cpp\" ? \"g++\" : \"gcc\";\n            const fullCommand = `${command} \"${filePath}\" -o \"${exePath}\"`;\n            child_process.exec(fullCommand, { cwd: tempDir }, (err, stdout, stderr) => {\n                if (err) {\n                    fs.unlinkSync(filePath);\n                    return reject(new Error(`Compilation failed:\\n${stderr || stdout || err.message}`));\n                }\n                const runCmd = os.platform() === \"win32\" ? `\"${exePath}\"` : exePath;\n                const child = child_process.spawn(runCmd, [], {\n                    cwd: tempDir,\n                    shell: true,\n                });\n                let output = \"\";\n                child.stdout.on(\"data\", async (data) => {\n                    output += data.toString();\n                    if (output.toLowerCase().includes(\"enter\") || output.includes(\"?\")) {\n                        const userInput = await vscode.window.showInputBox({\n                            prompt: \"Program needs input:\",\n                            placeHolder: \"Type your input here...\",\n                        });\n                        if (userInput !== undefined) {\n                            child.stdin.write(userInput + \"\\n\");\n                        }\n                        else {\n                            child.kill();\n                        }\n                    }\n                });\n                child.stderr.on(\"data\", (data) => {\n                    output += data.toString();\n                });\n                child.on(\"close\", (code) => {\n                    try {\n                        fs.unlinkSync(filePath);\n                        if (fs.existsSync(exePath))\n                            fs.unlinkSync(exePath);\n                    }\n                    catch (cleanupErr) {\n                        console.error(\"Cleanup error:\", cleanupErr);\n                    }\n                    if (code !== 0) {\n                        return reject(new Error(`Program exited with code ${code}:\\n${output}`));\n                    }\n                    resolve(output);\n                });\n                child.on(\"error\", (spawnErr) => {\n                    reject(new Error(`Failed to run program: ${spawnErr.message}`));\n                });\n            });\n        }\n        else if (language === \"python\") {\n            command = \"python\";\n            const child = child_process.spawn(command, [filePath], {\n                cwd: tempDir,\n                shell: true,\n            });\n            let output = \"\";\n            child.stdout.on(\"data\", async (data) => {\n                output += data.toString();\n                if (output.toLowerCase().includes(\"enter\") || output.includes(\"?\")) {\n                    const userInput = await vscode.window.showInputBox({\n                        prompt: \"Program needs input:\",\n                        placeHolder: \"Type your input here...\",\n                    });\n                    if (userInput !== undefined) {\n                        child.stdin.write(userInput + \"\\n\");\n                    }\n                    else {\n                        child.kill();\n                    }\n                }\n            });\n            child.stderr.on(\"data\", (data) => {\n                output += data.toString();\n            });\n            child.on(\"close\", (code) => {\n                try {\n                    fs.unlinkSync(filePath);\n                }\n                catch (cleanupErr) {\n                    console.error(\"Cleanup error:\", cleanupErr);\n                }\n                if (code !== 0) {\n                    return reject(new Error(`Program exited with code ${code}:\\n${output}`));\n                }\n                resolve(output);\n            });\n            child.on(\"error\", (spawnErr) => {\n                reject(new Error(`Failed to run program: ${spawnErr.message}`));\n            });\n        }\n        else {\n            resolve(\"Language not supported.\");\n        }\n    });\n}\nfunction deactivate() {\n    // Clean up the temporary directory on deactivate if necessary\n    const tempDir = path.join(os.tmpdir(), \"vscode-code-runner-temp\");\n    if (fs.existsSync(tempDir)) {\n        try {\n            fs.rmSync(tempDir, { recursive: true, force: true });\n        }\n        catch (e) {\n            console.error(\"Failed to clean up temporary directory:\", e);\n        }\n    }\n}\n","module.exports = require(\"child_process\");","module.exports = require(\"vscode\");","module.exports = require(\"os\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["ownKeys","__createBinding","this","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","getOwnPropertyNames","ar","prototype","hasOwnProperty","call","length","mod","result","i","exports","activate","context","subscriptions","push","vscode","commands","registerCommand","panel","window","createWebviewPanel","ViewColumn","One","enableScripts","retainContextWhenHidden","activeEditor","activeTextEditor","initialCode","initialLanguage","document","getText","fileName","endsWith","webview","html","getWebviewContent","onDidReceiveMessage","async","message","command","code","language","postMessage","output","tempDir","path","join","os","tmpdir","fs","existsSync","mkdirSync","recursive","filePath","workspaceFolders","workspace","Error","workspaceFilePath","uri","fsPath","fileCode","readFileSync","writeFileSync","Promise","resolve","reject","exePath","parse","name","platform","fullCommand","child_process","exec","cwd","err","stdout","stderr","unlinkSync","runCmd","child","spawn","shell","on","data","toString","toLowerCase","includes","userInput","showInputBox","prompt","placeHolder","stdin","write","kill","cleanupErr","console","error","spawnErr","runCodeWithInput","deactivate","rmSync","force","e","module","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}