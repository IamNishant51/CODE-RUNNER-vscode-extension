{"version":3,"file":"extension.js","mappings":"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","sources":[".././src/extension.ts","../external node-commonjs \"child_process\"","../external commonjs \"vscode\"","../external node-commonjs \"os\"","../external node-commonjs \"fs\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.activate = activate;\nexports.deactivate = deactivate;\nconst vscode = __importStar(require(\"vscode\"));\nconst child_process = __importStar(require(\"child_process\"));\nconst path = __importStar(require(\"path\"));\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst SUPPORTED_LANGUAGES = {\n    cpp: {\n        name: \"C++\",\n        extensions: [\".cpp\", \".cxx\", \".cc\"],\n        defaultFileName: \"main.cpp\",\n        compileCommand: \"g++ -std=c++17 -O2 -Wall\",\n        runCommand: \"{executable}\",\n        hasCompileStep: true,\n        supportsInput: true,\n        template: `#include <iostream>\r\n#include <vector>\r\n#include <string>\r\nusing namespace std;\r\n\r\nint main() {\r\n    cout << \"Hello, C++!\" << endl;\r\n    return 0;\r\n}`\n    },\n    c: {\n        name: \"C\",\n        extensions: [\".c\"],\n        defaultFileName: \"main.c\",\n        compileCommand: \"gcc -std=c11 -O2 -Wall\",\n        runCommand: \"{executable}\",\n        hasCompileStep: true,\n        supportsInput: true,\n        template: `#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    printf(\"Hello, C!\\\\n\");\r\n    return 0;\r\n}`\n    },\n    python: {\n        name: \"Python\",\n        extensions: [\".py\"],\n        defaultFileName: \"main.py\",\n        runCommand: \"python {file}\",\n        hasCompileStep: false,\n        supportsInput: true,\n        template: `#!/usr/bin/env python3\r\n\"\"\"\r\nPython Code Runner Template\r\n\"\"\"\r\n\r\ndef main():\r\n    print(\"Hello, Python!\")\r\n\r\nif __name__ == \"__main__\":\r\n    main()`\n    },\n    java: {\n        name: \"Java\",\n        extensions: [\".java\"],\n        defaultFileName: \"Main.java\",\n        compileCommand: \"javac\",\n        runCommand: \"java {className}\",\n        hasCompileStep: true,\n        supportsInput: true,\n        template: `public class Main {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Hello, Java!\");\r\n    }\r\n}`\n    },\n    javascript: {\n        name: \"JavaScript\",\n        extensions: [\".js\"],\n        defaultFileName: \"main.js\",\n        runCommand: \"node {file}\",\n        hasCompileStep: false,\n        supportsInput: true,\n        template: `// JavaScript Code Runner Template\r\nconsole.log(\"Hello, JavaScript!\");\r\n\r\n// Example with user input (uncomment to use)\r\n// const readline = require('readline');\r\n// const rl = readline.createInterface({\r\n//     input: process.stdin,\r\n//     output: process.stdout\r\n// });\r\n// rl.question('Enter your name: ', (name) => {\r\n//     console.log(\\`Hello, \\${name}!\\`);\r\n//     rl.close();\r\n// });`\n    },\n    typescript: {\n        name: \"TypeScript\",\n        extensions: [\".ts\"],\n        defaultFileName: \"main.ts\",\n        compileCommand: \"tsc --target es2020 --module commonjs\",\n        runCommand: \"node {jsFile}\",\n        hasCompileStep: true,\n        supportsInput: true,\n        template: `// TypeScript Code Runner Template\r\ninterface Greeter {\r\n    name: string;\r\n}\r\n\r\nfunction greet(greeter: Greeter): void {\r\n    console.log(\\`Hello, \\${greeter.name}!\\`);\r\n}\r\n\r\nconst user: Greeter = { name: \"TypeScript\" };\r\ngreet(user);`\n    },\n    go: {\n        name: \"Go\",\n        extensions: [\".go\"],\n        defaultFileName: \"main.go\",\n        runCommand: \"go run {file}\",\n        hasCompileStep: false,\n        supportsInput: true,\n        template: `package main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"bufio\"\r\n    \"os\"\r\n)\r\n\r\nfunc main() {\r\n    fmt.Println(\"Hello, Go!\")\r\n    \r\n    // Example with user input (uncomment to use)\r\n    // fmt.Print(\"Enter your name: \")\r\n    // scanner := bufio.NewScanner(os.Stdin)\r\n    // scanner.Scan()\r\n    // name := scanner.Text()\r\n    // fmt.Printf(\"Hello, %s!\\\\n\", name)\r\n}`\n    },\n    rust: {\n        name: \"Rust\",\n        extensions: [\".rs\"],\n        defaultFileName: \"main.rs\",\n        runCommand: \"rustc {file} -o {executable} && {executable}\",\n        hasCompileStep: false, // Combined compile and run\n        supportsInput: true,\n        template: `use std::io;\r\n\r\nfn main() {\r\n    println!(\"Hello, Rust!\");\r\n    \r\n    // Example with user input (uncomment to use)\r\n    // println!(\"Enter your name:\");\r\n    // let mut input = String::new();\r\n    // io::stdin().read_line(&mut input).expect(\"Failed to read line\");\r\n    // println!(\"Hello, {}!\", input.trim());\r\n}`\n    },\n    ruby: {\n        name: \"Ruby\",\n        extensions: [\".rb\"],\n        defaultFileName: \"main.rb\",\n        runCommand: \"ruby {file}\",\n        hasCompileStep: false,\n        supportsInput: true,\n        template: `#!/usr/bin/env ruby\r\n# Ruby Code Runner Template\r\n\r\nputs \"Hello, Ruby!\"\r\n\r\n# Example with user input (uncomment to use)\r\n# print \"Enter your name: \"\r\n# name = gets.chomp\r\n# puts \"Hello, #{name}!\"`\n    },\n    php: {\n        name: \"PHP\",\n        extensions: [\".php\"],\n        defaultFileName: \"main.php\",\n        runCommand: \"php {file}\",\n        hasCompileStep: false,\n        supportsInput: true,\n        template: `<?php\r\n// PHP Code Runner Template\r\n\r\necho \"Hello, PHP!\\\\n\";\r\n\r\n// Example with user input (uncomment to use)\r\n// echo \"Enter your name: \";\r\n// $name = trim(fgets(STDIN));\r\n// echo \"Hello, $name!\\\\n\";\r\n?>`\n    },\n    csharp: {\n        name: \"C#\",\n        extensions: [\".cs\"],\n        defaultFileName: \"Program.cs\",\n        compileCommand: \"csc\",\n        runCommand: \"{executable}\",\n        hasCompileStep: true,\n        supportsInput: true,\n        template: `using System;\r\n\r\nnamespace CodeRunner\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello, C#!\");\r\n            \r\n            // Example with user input (uncomment to use)\r\n            // Console.Write(\"Enter your name: \");\r\n            // string name = Console.ReadLine();\r\n            // Console.WriteLine($\"Hello, {name}!\");\r\n        }\r\n    }\r\n}`\n    }\n};\nconst activeProcesses = new Map();\n// Helper Functions\nfunction detectLanguageFromFileName(fileName) {\n    const ext = path.extname(fileName).toLowerCase();\n    for (const [lang, config] of Object.entries(SUPPORTED_LANGUAGES)) {\n        if (config.extensions.includes(ext)) {\n            return lang;\n        }\n    }\n    return null;\n}\nfunction requiresInput(output) {\n    const lowerOutput = output.toLowerCase();\n    const inputPatterns = [\n        'enter', 'input', 'type', 'name:', 'age:', 'number:',\n        'choose', 'select', 'press', ':', '>', 'scanf', 'cin >>',\n        'readline', 'input()', 'gets', 'getchar'\n    ];\n    return inputPatterns.some(pattern => lowerOutput.includes(pattern));\n}\nfunction formatCStyleCode(code) {\n    // Basic C-style code formatter\n    let formatted = code;\n    let indentLevel = 0;\n    const lines = formatted.split('\\n');\n    const formattedLines = [];\n    for (let line of lines) {\n        const trimmed = line.trim();\n        if (!trimmed) {\n            formattedLines.push('');\n            continue;\n        }\n        // Decrease indent for closing braces\n        if (trimmed.startsWith('}')) {\n            indentLevel = Math.max(0, indentLevel - 1);\n        }\n        // Add indentation\n        const indent = '    '.repeat(indentLevel);\n        formattedLines.push(indent + trimmed);\n        // Increase indent for opening braces\n        if (trimmed.endsWith('{')) {\n            indentLevel++;\n        }\n    }\n    return formattedLines.join('\\n');\n}\nasync function createTemplateFile(language, fileName, template) {\n    const workspaceFolders = vscode.workspace.workspaceFolders;\n    if (!workspaceFolders) {\n        vscode.window.showErrorMessage(\"No workspace folder is open.\");\n        return;\n    }\n    const filePath = path.join(workspaceFolders[0].uri.fsPath, fileName);\n    // Check if file already exists\n    if (fs.existsSync(filePath)) {\n        const overwrite = await vscode.window.showWarningMessage(`File ${fileName} already exists. Overwrite?`, 'Yes', 'No');\n        if (overwrite !== 'Yes') {\n            return;\n        }\n    }\n    try {\n        fs.writeFileSync(filePath, template, 'utf8');\n        vscode.window.showInformationMessage(`Template created: ${fileName}`);\n        // Open the created file\n        const document = await vscode.workspace.openTextDocument(filePath);\n        await vscode.window.showTextDocument(document);\n    }\n    catch (error) {\n        vscode.window.showErrorMessage(`Failed to create template: ${error}`);\n    }\n}\nfunction activate(context) {\n    // Register main code runner panel command\n    context.subscriptions.push(vscode.commands.registerCommand(\"codeRunner.openPanel\", () => {\n        createCodeRunnerPanel();\n    }));\n    // Register quick run command for current file\n    context.subscriptions.push(vscode.commands.registerCommand(\"codeRunner.runCurrentFile\", () => {\n        const activeEditor = vscode.window.activeTextEditor;\n        if (!activeEditor) {\n            vscode.window.showErrorMessage(\"No active file to run.\");\n            return;\n        }\n        const fileName = path.basename(activeEditor.document.fileName);\n        const language = detectLanguageFromFileName(fileName);\n        if (!language) {\n            vscode.window.showErrorMessage(\"Unsupported file type for code runner.\");\n            return;\n        }\n        createCodeRunnerPanel(activeEditor.document.getText(), language, fileName);\n    }));\n    // Register template creation command\n    context.subscriptions.push(vscode.commands.registerCommand(\"codeRunner.createTemplate\", async () => {\n        const languageItems = Object.keys(SUPPORTED_LANGUAGES).map(key => ({\n            label: SUPPORTED_LANGUAGES[key].name,\n            value: key\n        }));\n        const selected = await vscode.window.showQuickPick(languageItems, {\n            placeHolder: \"Select a language template to create\"\n        });\n        if (selected) {\n            const config = SUPPORTED_LANGUAGES[selected.value];\n            const fileName = await vscode.window.showInputBox({\n                prompt: `Enter filename for ${config.name} template`,\n                value: config.defaultFileName\n            });\n            if (fileName) {\n                createTemplateFile(selected.value, fileName, config.template);\n            }\n        }\n    }));\n    // Register settings command\n    context.subscriptions.push(vscode.commands.registerCommand(\"codeRunner.openSettings\", () => {\n        vscode.commands.executeCommand('workbench.action.openSettings', 'codeRunner');\n    }));\n    function createCodeRunnerPanel(initialCode, initialLanguage, fileName) {\n        const panel = vscode.window.createWebviewPanel(\"codeRunner\", \"Advanced Code Runner\", vscode.ViewColumn.One, {\n            enableScripts: true,\n            retainContextWhenHidden: true,\n        });\n        const panelId = `panel-${Date.now()}-${Math.random().toString(36).substring(7)}`;\n        // Auto-detect from active editor if not provided\n        if (!initialCode || !initialLanguage) {\n            const activeEditor = vscode.window.activeTextEditor;\n            if (activeEditor) {\n                initialCode = initialCode || activeEditor.document.getText();\n                const detectedLang = detectLanguageFromFileName(activeEditor.document.fileName);\n                initialLanguage = initialLanguage || detectedLang || \"cpp\";\n                fileName = fileName || path.basename(activeEditor.document.fileName);\n            }\n            else {\n                initialCode = initialCode || \"\";\n                initialLanguage = initialLanguage || \"cpp\";\n                fileName = fileName || SUPPORTED_LANGUAGES[initialLanguage].defaultFileName;\n            }\n        }\n        panel.webview.html = getWebviewContent(initialCode, initialLanguage, fileName);\n        panel.webview.onDidReceiveMessage(async (message) => {\n            switch (message.command) {\n                case \"runCode\":\n                    await handleRunCode(panel, panelId, message);\n                    break;\n                case \"clearOutput\":\n                    handleClearOutput(panel, panelId);\n                    break;\n                case \"sendInput\":\n                    handleSendInput(panel, panelId, message.input);\n                    break;\n                case \"getTemplate\":\n                    handleGetTemplate(panel, message.language);\n                    break;\n                case \"saveFile\":\n                    await handleSaveFile(message.fileName, message.code);\n                    break;\n                case \"formatCode\":\n                    await handleFormatCode(panel, message.language, message.code);\n                    break;\n            }\n        });\n        panel.onDidDispose(() => {\n            if (activeProcesses.has(panelId)) {\n                activeProcesses.get(panelId)?.kill('SIGKILL');\n                activeProcesses.delete(panelId);\n            }\n        });\n    }\n    async function handleRunCode(panel, panelId, message) {\n        const { language, fileName, code, args } = message;\n        if (activeProcesses.has(panelId)) {\n            activeProcesses.get(panelId)?.kill('SIGKILL');\n            activeProcesses.delete(panelId);\n            panel.webview.postMessage({ command: \"removeInputPrompt\" });\n        }\n        if (!fileName) {\n            panel.webview.postMessage({\n                command: \"appendOutput\",\n                output: \"❌ Error: Please enter a file name.\\n\",\n            });\n            return;\n        }\n        panel.webview.postMessage({ command: \"clearOutput\" });\n        panel.webview.postMessage({\n            command: \"appendOutput\",\n            output: `🚀 Running ${SUPPORTED_LANGUAGES[language]?.name || language} code...\\n`,\n        });\n        const startTime = Date.now();\n        try {\n            const process = await runCodeProcess(language, fileName, code, args);\n            activeProcesses.set(panelId, process);\n            process.stdout.on(\"data\", (data) => {\n                const chunk = data.toString();\n                panel.webview.postMessage({ command: \"appendOutput\", output: chunk });\n                // Smart input detection\n                if (requiresInput(chunk) && process.stdin.writable) {\n                    panel.webview.postMessage({ command: \"requestInput\" });\n                }\n            });\n            process.stderr.on(\"data\", (data) => {\n                const chunk = data.toString();\n                panel.webview.postMessage({\n                    command: \"appendOutput\",\n                    output: `🔴 ${chunk}`,\n                    isError: true\n                });\n            });\n            process.on(\"close\", (code) => {\n                const endTime = Date.now();\n                const executionTime = endTime - startTime;\n                panel.webview.postMessage({ command: \"removeInputPrompt\" });\n                activeProcesses.delete(panelId);\n                if (code !== 0) {\n                    panel.webview.postMessage({\n                        command: \"appendOutput\",\n                        output: `\\n❌ Program exited with code ${code} (${executionTime}ms)`,\n                    });\n                }\n                else {\n                    panel.webview.postMessage({\n                        command: \"appendOutput\",\n                        output: `\\n✅ Program finished successfully (${executionTime}ms)`,\n                    });\n                }\n            });\n            process.on(\"error\", (spawnErr) => {\n                panel.webview.postMessage({\n                    command: \"appendOutput\",\n                    output: `\\n❌ Failed to run program: ${spawnErr.message}`,\n                });\n                panel.webview.postMessage({ command: \"removeInputPrompt\" });\n                activeProcesses.delete(panelId);\n            });\n        }\n        catch (err) {\n            panel.webview.postMessage({\n                command: \"appendOutput\",\n                output: `\\n❌ Error: ${err.message || err.toString()}`,\n            });\n            panel.webview.postMessage({ command: \"removeInputPrompt\" });\n            activeProcesses.delete(panelId);\n        }\n    }\n    function handleClearOutput(panel, panelId) {\n        panel.webview.postMessage({ command: \"clearOutput\" });\n        panel.webview.postMessage({ command: \"removeInputPrompt\" });\n        if (activeProcesses.has(panelId)) {\n            activeProcesses.get(panelId)?.kill('SIGKILL');\n            activeProcesses.delete(panelId);\n        }\n    }\n    function handleSendInput(panel, panelId, input) {\n        const process = activeProcesses.get(panelId);\n        if (process && process.stdin && !process.stdin.writableEnded) {\n            panel.webview.postMessage({ command: \"appendOutput\", output: input + \"\\n\" });\n            process.stdin.write(input + \"\\n\");\n            panel.webview.postMessage({ command: \"removeInputPrompt\" });\n        }\n        else {\n            panel.webview.postMessage({\n                command: \"appendOutput\",\n                output: \"\\n❌ No active program to send input to.\\n\"\n            });\n            panel.webview.postMessage({ command: \"removeInputPrompt\" });\n        }\n    }\n    function handleGetTemplate(panel, language) {\n        const config = SUPPORTED_LANGUAGES[language];\n        if (config) {\n            panel.webview.postMessage({\n                command: \"setTemplate\",\n                template: config.template,\n                fileName: config.defaultFileName\n            });\n        }\n    }\n    async function handleSaveFile(fileName, code) {\n        const workspaceFolders = vscode.workspace.workspaceFolders;\n        if (!workspaceFolders) {\n            vscode.window.showErrorMessage(\"No workspace folder is open.\");\n            return;\n        }\n        const filePath = path.join(workspaceFolders[0].uri.fsPath, fileName);\n        try {\n            fs.writeFileSync(filePath, code, 'utf8');\n            vscode.window.showInformationMessage(`File saved: ${fileName}`);\n        }\n        catch (error) {\n            vscode.window.showErrorMessage(`Failed to save file: ${error}`);\n        }\n    }\n    async function handleFormatCode(panel, language, code) {\n        // Basic formatting - could be enhanced with language-specific formatters\n        let formattedCode = code;\n        // Simple indentation fixes for C-style languages\n        if (['cpp', 'c', 'java', 'csharp', 'javascript', 'typescript'].includes(language)) {\n            formattedCode = formatCStyleCode(code);\n        }\n        panel.webview.postMessage({\n            command: \"setFormattedCode\",\n            code: formattedCode\n        });\n    }\n}\nfunction getWebviewContent(initialCode, initialLanguage, initialFileName) {\n    const languageOptions = Object.keys(SUPPORTED_LANGUAGES).map(lang => {\n        const config = SUPPORTED_LANGUAGES[lang];\n        return `<option value=\"${lang}\" ${lang === initialLanguage ? 'selected' : ''}>${config.name}</option>`;\n    }).join('');\n    const defaultFileName = initialFileName || SUPPORTED_LANGUAGES[initialLanguage]?.defaultFileName || 'main.cpp';\n    return `\r\n    <!DOCTYPE html>\r\n    <html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"UTF-8\" />\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n        <title>Advanced Code Runner</title>\r\n        <style>\r\n            * {\r\n                box-sizing: border-box;\r\n                margin: 0;\r\n                padding: 0;\r\n            }\r\n\r\n            body {\r\n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\r\n                background: #0d1117;\r\n                color: #c9d1d9;\r\n                min-height: 100vh;\r\n                display: flex;\r\n                flex-direction: column;\r\n                line-height: 1.5;\r\n            }\r\n\r\n            .header {\r\n                background: linear-gradient(135deg, #161b22, #1c2128);\r\n                border-bottom: 1px solid #30363d;\r\n                padding: 20px 32px;\r\n                box-shadow: 0 2px 8px rgba(0,0,0,0.3);\r\n            }\r\n\r\n            .header h1 {\r\n                font-size: 20px;\r\n                font-weight: 600;\r\n                color: #c9d1d9;\r\n                display: flex;\r\n                align-items: center;\r\n                gap: 12px;\r\n            }\r\n\r\n            .logo {\r\n                width: 28px;\r\n                height: 28px;\r\n                background: linear-gradient(135deg, #58a6ff, #388bfd);\r\n                border-radius: 6px;\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n                color: #ffffff;\r\n                font-size: 12px;\r\n                font-weight: 700;\r\n                box-shadow: 0 2px 8px rgba(88,166,255,0.3);\r\n            }\r\n\r\n            .container {\r\n                flex: 1;\r\n                max-width: 1200px;\r\n                width: 100%;\r\n                margin: 0 auto;\r\n                padding: 32px;\r\n                display: flex;\r\n                flex-direction: column;\r\n                gap: 24px;\r\n            }\r\n\r\n            .controls {\r\n                background: #161b22;\r\n                border: 1px solid #30363d;\r\n                border-radius: 12px;\r\n                padding: 24px;\r\n                display: flex;\r\n                flex-direction: column;\r\n                gap: 20px;\r\n                box-shadow: 0 4px 16px rgba(0,0,0,0.2);\r\n            }\r\n\r\n            .control-row {\r\n                display: grid;\r\n                grid-template-columns: 1fr 180px 120px 100px 100px;\r\n                gap: 16px;\r\n                align-items: end;\r\n            }\r\n\r\n            .control-actions {\r\n                display: flex;\r\n                gap: 12px;\r\n                justify-content: flex-end;\r\n                margin-top: 16px;\r\n            }\r\n\r\n            .field {\r\n                display: flex;\r\n                flex-direction: column;\r\n                gap: 8px;\r\n            }\r\n\r\n            .label {\r\n                font-size: 13px;\r\n                font-weight: 500;\r\n                color: #8b949e;\r\n                display: flex;\r\n                align-items: center;\r\n                gap: 6px;\r\n            }\r\n\r\n            .input, .select, .textarea {\r\n                height: 42px;\r\n                padding: 10px 14px;\r\n                border: 1px solid #30363d;\r\n                border-radius: 8px;\r\n                font-size: 14px;\r\n                background: #0d1117;\r\n                color: #c9d1d9;\r\n                transition: all 0.2s ease;\r\n                outline: none;\r\n                font-family: ui-monospace, 'SF Mono', Monaco, 'Cascadia Code', monospace;\r\n            }\r\n\r\n            .textarea {\r\n                height: auto;\r\n                min-height: 42px;\r\n                resize: vertical;\r\n                font-family: ui-monospace, 'SF Mono', Monaco, 'Cascadia Code', monospace;\r\n            }\r\n\r\n            .input:focus, .select:focus, .textarea:focus {\r\n                border-color: #58a6ff;\r\n                box-shadow: 0 0 0 2px rgba(88,166,255,0.2);\r\n            }\r\n\r\n            .btn {\r\n                height: 42px;\r\n                color: #ffffff;\r\n                border: none;\r\n                border-radius: 8px;\r\n                font-size: 14px;\r\n                font-weight: 500;\r\n                cursor: pointer;\r\n                transition: all 0.2s ease;\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n                gap: 8px;\r\n                padding: 0 16px;\r\n                position: relative;\r\n                overflow: hidden;\r\n            }\r\n\r\n            .btn-primary {\r\n                background: linear-gradient(135deg, #238636, #2ea043);\r\n                box-shadow: 0 2px 8px rgba(35,134,54,0.3);\r\n            }\r\n\r\n            .btn-primary:hover {\r\n                background: linear-gradient(135deg, #2ea043, #46954a);\r\n                transform: translateY(-1px);\r\n                box-shadow: 0 4px 16px rgba(35,134,54,0.4);\r\n            }\r\n\r\n            .btn-secondary {\r\n                background: linear-gradient(135deg, #6a737d, #8b949e);\r\n            }\r\n\r\n            .btn-secondary:hover {\r\n                background: linear-gradient(135deg, #8b949e, #9ca3a9);\r\n                transform: translateY(-1px);\r\n            }\r\n\r\n            .btn-outline {\r\n                background: transparent;\r\n                border: 1px solid #30363d;\r\n                color: #c9d1d9;\r\n            }\r\n\r\n            .btn-outline:hover {\r\n                background: #21262d;\r\n                border-color: #58a6ff;\r\n            }\r\n\r\n            .output-section {\r\n                flex: 1;\r\n                background: #161b22;\r\n                border: 1px solid #30363d;\r\n                border-radius: 12px;\r\n                display: flex;\r\n                flex-direction: column;\r\n                min-height: 400px;\r\n                box-shadow: 0 4px 16px rgba(0,0,0,0.2);\r\n            }\r\n\r\n            .output-header {\r\n                padding: 16px 20px;\r\n                border-bottom: 1px solid #30363d;\r\n                background: #21262d;\r\n                border-radius: 12px 12px 0 0;\r\n                display: flex;\r\n                justify-content: space-between;\r\n                align-items: center;\r\n            }\r\n\r\n            .output-title {\r\n                font-size: 14px;\r\n                font-weight: 600;\r\n                color: #c9d1d9;\r\n                display: flex;\r\n                align-items: center;\r\n                gap: 8px;\r\n            }\r\n\r\n            .status-indicator {\r\n                width: 8px;\r\n                height: 8px;\r\n                border-radius: 50%;\r\n                background: #6a737d;\r\n                animation: pulse 2s infinite;\r\n            }\r\n\r\n            .status-indicator.running {\r\n                background: #f85149;\r\n                animation: pulse 1s infinite;\r\n            }\r\n\r\n            .status-indicator.success {\r\n                background: #3fb950;\r\n                animation: none;\r\n            }\r\n\r\n            @keyframes pulse {\r\n                0%, 100% { opacity: 1; }\r\n                50% { opacity: 0.5; }\r\n            }\r\n\r\n            .output-content {\r\n                flex: 1;\r\n                padding: 20px;\r\n                font-family: ui-monospace, 'SF Mono', Monaco, 'Cascadia Code', monospace;\r\n                font-size: 13px;\r\n                line-height: 1.6;\r\n                color: #c9d1d9;\r\n                background: #0d1117;\r\n                white-space: pre-wrap;\r\n                word-wrap: break-word;\r\n                overflow-y: auto;\r\n                border-radius: 0 0 12px 12px;\r\n                display: flex;\r\n                flex-direction: column;\r\n            }\r\n\r\n            .output-content:empty:not(:has(.input-prompt-line))::before {\r\n                content: '🚀 Ready to run your code! Select a language and hit Run.';\r\n                color: #8b949e;\r\n                font-style: italic;\r\n            }\r\n\r\n            .play-icon {\r\n                width: 0;\r\n                height: 0;\r\n                border-left: 8px solid currentColor;\r\n                border-top: 5px solid transparent;\r\n                border-bottom: 5px solid transparent;\r\n                margin-left: 2px;\r\n            }\r\n\r\n            .icon {\r\n                width: 16px;\r\n                height: 16px;\r\n                fill: currentColor;\r\n            }\r\n\r\n            .input-prompt-line {\r\n                display: flex;\r\n                align-items: center;\r\n                margin-top: auto;\r\n                width: 100%;\r\n                box-sizing: border-box;\r\n                background: rgba(88,166,255,0.1);\r\n                padding: 8px;\r\n                border-radius: 6px;\r\n                border: 1px solid rgba(88,166,255,0.3);\r\n            }\r\n\r\n            .input-prompt-line input {\r\n                flex-grow: 1;\r\n                padding: 8px 12px;\r\n                border: 1px solid #58a6ff;\r\n                border-radius: 6px;\r\n                background-color: #0d1117;\r\n                color: #ffffff;\r\n                font-family: ui-monospace, 'SF Mono', Monaco, 'Cascadia Code', monospace;\r\n                font-size: 13px;\r\n                outline: none;\r\n                margin-left: 8px;\r\n            }\r\n\r\n            .input-prompt-prefix {\r\n                color: #58a6ff;\r\n                font-weight: bold;\r\n                display: flex;\r\n                align-items: center;\r\n                gap: 4px;\r\n            }\r\n\r\n            .language-info {\r\n                background: rgba(88,166,255,0.1);\r\n                border: 1px solid rgba(88,166,255,0.3);\r\n                border-radius: 6px;\r\n                padding: 12px;\r\n                margin-bottom: 16px;\r\n                font-size: 12px;\r\n                color: #8b949e;\r\n            }\r\n\r\n            .args-field {\r\n                grid-column: span 2;\r\n            }\r\n\r\n            @media (max-width: 768px) {\r\n                .container {\r\n                    padding: 20px 16px;\r\n                }\r\n\r\n                .control-row {\r\n                    grid-template-columns: 1fr;\r\n                    gap: 16px;\r\n                }\r\n\r\n                .control-actions {\r\n                    flex-direction: column;\r\n                }\r\n\r\n                .header {\r\n                    padding: 16px 20px;\r\n                }\r\n            }\r\n        </style>\r\n    </head>\r\n    <body>\r\n        <div class=\"header\">\r\n            <h1>\r\n                <div class=\"logo\">ACR</div>\r\n                Advanced Code Runner\r\n            </h1>\r\n        </div>\r\n\r\n        <div class=\"container\">\r\n            <div class=\"controls\">\r\n                <div id=\"languageInfo\" class=\"language-info\"></div>\r\n                \r\n                <div class=\"control-row\">\r\n                    <div class=\"field\">\r\n                        <label class=\"label\">📄 File Name</label>\r\n                        <input type=\"text\" class=\"input\" id=\"fileName\" placeholder=\"main.cpp\" value=\"${defaultFileName}\" />\r\n                    </div>\r\n                    <div class=\"field\">\r\n                        <label class=\"label\">🌐 Language</label>\r\n                        <select class=\"select\" id=\"language\">\r\n                            ${languageOptions}\r\n                        </select>\r\n                    </div>\r\n                    <div class=\"field args-field\">\r\n                        <label class=\"label\">⚙️ Arguments (optional)</label>\r\n                        <input type=\"text\" class=\"input\" id=\"args\" placeholder=\"arg1 arg2...\" />\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"control-actions\">\r\n                    <button class=\"btn btn-outline\" onclick=\"loadTemplate()\">\r\n                        📋 Load Template\r\n                    </button>\r\n                    <button class=\"btn btn-outline\" onclick=\"saveFile()\">\r\n                        💾 Save File\r\n                    </button>\r\n                    <button class=\"btn btn-outline\" onclick=\"formatCode()\">\r\n                        ✨ Format\r\n                    </button>\r\n                    <button class=\"btn btn-secondary\" onclick=\"clearOutput()\">\r\n                        🗑️ Clear\r\n                    </button>\r\n                    <button class=\"btn btn-primary\" onclick=\"runCode()\">\r\n                        <div class=\"play-icon\"></div>\r\n                        Run Code\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"output-section\">\r\n                <div class=\"output-header\">\r\n                    <div class=\"output-title\">\r\n                        <div class=\"status-indicator\" id=\"statusIndicator\"></div>\r\n                        Output Console\r\n                    </div>\r\n                    <div id=\"executionTime\" style=\"font-size: 12px; color: #8b949e;\"></div>\r\n                </div>\r\n                <div class=\"output-content\" id=\"output\"></div>\r\n            </div>\r\n        </div>\r\n\r\n        <script>\r\n            const vscode = acquireVsCodeApi();\r\n            const outputElement = document.getElementById(\"output\");\r\n            const statusIndicator = document.getElementById(\"statusIndicator\");\r\n            const languageSelect = document.getElementById('language');\r\n            const fileNameInput = document.getElementById('fileName');\r\n            const languageInfo = document.getElementById('languageInfo');\r\n\r\n            // Language configurations\r\n            const languages = ${JSON.stringify(SUPPORTED_LANGUAGES)};\r\n\r\n            function updateLanguageInfo() {\r\n                const selectedLang = languageSelect.value;\r\n                const config = languages[selectedLang];\r\n                if (config) {\r\n                    languageInfo.innerHTML = \\`\r\n                        <strong>\\${config.name}</strong> • \r\n                        Extensions: \\${config.extensions.join(', ')} • \r\n                        \\${config.hasCompileStep ? 'Compiled' : 'Interpreted'} • \r\n                        \\${config.supportsInput ? 'Supports Input' : 'No Input Support'}\r\n                    \\`;\r\n                }\r\n            }\r\n\r\n            languageSelect.addEventListener('change', (event) => {\r\n                const language = event.target.value;\r\n                const config = languages[language];\r\n                if (config) {\r\n                    fileNameInput.value = config.defaultFileName;\r\n                    updateLanguageInfo();\r\n                }\r\n            });\r\n\r\n            function runCode() {\r\n                const fileName = fileNameInput.value.trim();\r\n                const language = languageSelect.value;\r\n                const args = document.getElementById(\"args\").value.trim();\r\n\r\n                if (!fileName) {\r\n                    outputElement.innerHTML = \"❌ Please enter a file name.\";\r\n                    return;\r\n                }\r\n\r\n                statusIndicator.className = \"status-indicator running\";\r\n                outputElement.innerHTML = \"\";\r\n                vscode.postMessage({ \r\n                    command: \"runCode\", \r\n                    language, \r\n                    fileName, \r\n                    args: args || null \r\n                });\r\n            }\r\n\r\n            function clearOutput() {\r\n                outputElement.innerHTML = \"\";\r\n                statusIndicator.className = \"status-indicator\";\r\n                vscode.postMessage({ command: \"clearOutput\" });\r\n            }\r\n\r\n            function loadTemplate() {\r\n                const language = languageSelect.value;\r\n                vscode.postMessage({ command: \"getTemplate\", language });\r\n            }\r\n\r\n            function saveFile() {\r\n                const fileName = fileNameInput.value.trim();\r\n                if (!fileName) {\r\n                    alert(\"Please enter a file name.\");\r\n                    return;\r\n                }\r\n                // For now, we'll save empty content - could be enhanced to get code from editor\r\n                vscode.postMessage({ command: \"saveFile\", fileName, code: \"\" });\r\n            }\r\n\r\n            function formatCode() {\r\n                const language = languageSelect.value;\r\n                // For now, we'll format empty content - could be enhanced to get code from editor\r\n                vscode.postMessage({ command: \"formatCode\", language, code: \"\" });\r\n            }\r\n\r\n            function createInputPrompt() {\r\n                let inputPromptLine = outputElement.querySelector('.input-prompt-line');\r\n                if (!inputPromptLine) {\r\n                    inputPromptLine = document.createElement('div');\r\n                    inputPromptLine.className = 'input-prompt-line';\r\n                    inputPromptLine.innerHTML = \\`\r\n                        <span class=\"input-prompt-prefix\">\r\n                            ⌨️ Input:\r\n                        </span>\r\n                        <input type=\"text\" class=\"program-input-field\" placeholder=\"Type your input here...\">\r\n                    \\`;\r\n                    outputElement.appendChild(inputPromptLine);\r\n                }\r\n\r\n                const inputField = inputPromptLine.querySelector('.program-input-field');\r\n                if (inputField) {\r\n                    inputField.value = '';\r\n                    inputField.disabled = false;\r\n                    inputField.focus();\r\n\r\n                    if (!inputField.dataset.listenerAdded) {\r\n                        inputField.dataset.listenerAdded = 'true';\r\n                        inputField.addEventListener('keydown', function(event) {\r\n                            if (event.key === 'Enter') {\r\n                                const inputValue = inputField.value;\r\n                                inputField.disabled = true;\r\n                                vscode.postMessage({ command: 'sendInput', input: inputValue });\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                outputElement.scrollTop = outputElement.scrollHeight;\r\n            }\r\n\r\n            function removeInputPrompt() {\r\n                const inputPromptLine = outputElement.querySelector('.input-prompt-line');\r\n                if (inputPromptLine) {\r\n                    inputPromptLine.remove();\r\n                }\r\n            }\r\n\r\n            window.addEventListener(\"message\", (event) => {\r\n                const message = event.data;\r\n                switch (message.command) {\r\n                    case \"appendOutput\":\r\n                        const outputSpan = document.createElement('span');\r\n                        outputSpan.textContent = message.output;\r\n                        if (message.isError) {\r\n                            outputSpan.style.color = '#f85149';\r\n                        }\r\n                        \r\n                        const existingInputPrompt = outputElement.querySelector('.input-prompt-line');\r\n                        if (existingInputPrompt) {\r\n                            outputElement.insertBefore(outputSpan, existingInputPrompt);\r\n                        } else {\r\n                            outputElement.appendChild(outputSpan);\r\n                        }\r\n                        \r\n                        outputElement.scrollTop = outputElement.scrollHeight;\r\n                        \r\n                        // Update status for completion messages\r\n                        if (message.output.includes('✅ Program finished')) {\r\n                            statusIndicator.className = \"status-indicator success\";\r\n                        }\r\n                        break;\r\n                        \r\n                    case \"clearOutput\":\r\n                        outputElement.innerHTML = \"\";\r\n                        statusIndicator.className = \"status-indicator\";\r\n                        break;\r\n                        \r\n                    case \"requestInput\":\r\n                        createInputPrompt();\r\n                        break;\r\n                        \r\n                    case \"removeInputPrompt\":\r\n                        removeInputPrompt();\r\n                        break;\r\n                        \r\n                    case \"setTemplate\":\r\n                        // Could be enhanced to populate a code editor\r\n                        alert(\"Template loaded! Check your workspace for the new file.\");\r\n                        break;\r\n                        \r\n                    case \"setFormattedCode\":\r\n                        // Could be enhanced to update a code editor\r\n                        alert(\"Code formatted!\");\r\n                        break;\r\n                }\r\n            });\r\n\r\n            // Initialize\r\n            updateLanguageInfo();\r\n        </script>\r\n    </body>\r\n    </html>\r\n  `;\n}\nasync function runCodeProcess(language, fileName, code, args) {\n    const config = SUPPORTED_LANGUAGES[language];\n    if (!config) {\n        throw new Error(`Unsupported language: ${language}`);\n    }\n    const tempDir = path.join(os.tmpdir(), \"vscode-advanced-code-runner-temp\");\n    if (!fs.existsSync(tempDir))\n        fs.mkdirSync(tempDir, { recursive: true });\n    const filePath = path.join(tempDir, fileName);\n    // Get code content - either from parameter or from workspace file\n    let fileContent = code;\n    if (!fileContent) {\n        const workspaceFolders = vscode.workspace.workspaceFolders;\n        if (!workspaceFolders) {\n            throw new Error(\"No workspace folder is open. Please open a folder containing your code files.\");\n        }\n        const workspaceFilePath = path.join(workspaceFolders[0].uri.fsPath, fileName);\n        if (!fs.existsSync(workspaceFilePath)) {\n            throw new Error(`File \"${fileName}\" not found in workspace. Please ensure the file exists in your workspace folder.`);\n        }\n        fileContent = fs.readFileSync(workspaceFilePath, 'utf8');\n    }\n    fs.writeFileSync(filePath, fileContent);\n    return new Promise((resolve, reject) => {\n        let childProcess;\n        // Handle compiled languages\n        if (config.hasCompileStep && config.compileCommand) {\n            executeCompiledLanguage(language, config, filePath, tempDir, args)\n                .then(resolve)\n                .catch(reject);\n        }\n        else {\n            // Handle interpreted languages\n            executeInterpretedLanguage(language, config, filePath, tempDir, args)\n                .then(resolve)\n                .catch(reject);\n        }\n    });\n}\nasync function executeCompiledLanguage(language, config, filePath, tempDir, args) {\n    return new Promise((resolve, reject) => {\n        const fileName = path.basename(filePath);\n        const baseName = path.parse(fileName).name;\n        const exePath = path.join(tempDir, baseName + (os.platform() === \"win32\" ? \".exe\" : \"\"));\n        let compileCommand;\n        switch (language) {\n            case 'cpp':\n            case 'c':\n                compileCommand = `${config.compileCommand} \"${filePath}\" -o \"${exePath}\"`;\n                break;\n            case 'java':\n                compileCommand = `javac \"${filePath}\"`;\n                break;\n            case 'csharp':\n                compileCommand = `csc \"${filePath}\" -out:\"${exePath}\"`;\n                break;\n            case 'typescript':\n                const jsPath = path.join(tempDir, baseName + \".js\");\n                compileCommand = `${config.compileCommand} \"${filePath}\" --outFile \"${jsPath}\"`;\n                break;\n            default:\n                return reject(new Error(`Compilation not implemented for ${language}`));\n        }\n        child_process.exec(compileCommand, { cwd: tempDir }, (err, stdout, stderr) => {\n            if (err) {\n                try {\n                    fs.unlinkSync(filePath);\n                }\n                catch (e) { /* ignore */ }\n                return reject(new Error(`Compilation failed:\\\\n${stderr || stdout || err.message}`));\n            }\n            let runCommand;\n            let runArgs = [];\n            switch (language) {\n                case 'cpp':\n                case 'c':\n                case 'csharp':\n                    runCommand = os.platform() === \"win32\" ? `\"${exePath}\"` : exePath;\n                    break;\n                case 'java':\n                    runCommand = 'java';\n                    runArgs = ['-cp', tempDir, baseName];\n                    break;\n                case 'typescript':\n                    const jsPath = path.join(tempDir, baseName + \".js\");\n                    runCommand = 'node';\n                    runArgs = [jsPath];\n                    break;\n                default:\n                    return reject(new Error(`Execution not implemented for ${language}`));\n            }\n            if (args) {\n                runArgs.push(...args.split(' '));\n            }\n            const childProcess = child_process.spawn(runCommand, runArgs, {\n                cwd: tempDir,\n                shell: true,\n            });\n            childProcess.on('exit', () => {\n                // Cleanup\n                try {\n                    fs.unlinkSync(filePath);\n                    if (fs.existsSync(exePath))\n                        fs.unlinkSync(exePath);\n                    // Java class files\n                    if (language === 'java') {\n                        const classFile = path.join(tempDir, baseName + \".class\");\n                        if (fs.existsSync(classFile))\n                            fs.unlinkSync(classFile);\n                    }\n                    // TypeScript JS files\n                    if (language === 'typescript') {\n                        const jsPath = path.join(tempDir, baseName + \".js\");\n                        if (fs.existsSync(jsPath))\n                            fs.unlinkSync(jsPath);\n                    }\n                }\n                catch (cleanupErr) {\n                    console.error(\"Cleanup error:\", cleanupErr);\n                }\n            });\n            resolve(childProcess);\n        });\n    });\n}\nasync function executeInterpretedLanguage(language, config, filePath, tempDir, args) {\n    return new Promise((resolve, reject) => {\n        let command;\n        let cmdArgs = [];\n        switch (language) {\n            case 'python':\n                command = 'python';\n                cmdArgs = [filePath];\n                break;\n            case 'javascript':\n                command = 'node';\n                cmdArgs = [filePath];\n                break;\n            case 'go':\n                command = 'go';\n                cmdArgs = ['run', filePath];\n                break;\n            case 'rust':\n                const fileName = path.basename(filePath);\n                const baseName = path.parse(fileName).name;\n                const exePath = path.join(tempDir, baseName + (os.platform() === \"win32\" ? \".exe\" : \"\"));\n                command = 'rustc';\n                cmdArgs = [filePath, '-o', exePath, '&&', exePath];\n                break;\n            case 'ruby':\n                command = 'ruby';\n                cmdArgs = [filePath];\n                break;\n            case 'php':\n                command = 'php';\n                cmdArgs = [filePath];\n                break;\n            default:\n                return reject(new Error(`Language ${language} not supported yet`));\n        }\n        if (args) {\n            cmdArgs.push(...args.split(' '));\n        }\n        // For Rust, we need special handling due to the && operator\n        if (language === 'rust') {\n            const fullCommand = cmdArgs.join(' ');\n            const childProcess = child_process.spawn(fullCommand, [], {\n                cwd: tempDir,\n                shell: true,\n            });\n            childProcess.on('exit', () => {\n                try {\n                    fs.unlinkSync(filePath);\n                    const fileName = path.basename(filePath);\n                    const baseName = path.parse(fileName).name;\n                    const exePath = path.join(tempDir, baseName + (os.platform() === \"win32\" ? \".exe\" : \"\"));\n                    if (fs.existsSync(exePath))\n                        fs.unlinkSync(exePath);\n                }\n                catch (cleanupErr) {\n                    console.error(\"Cleanup error:\", cleanupErr);\n                }\n            });\n            resolve(childProcess);\n        }\n        else {\n            const childProcess = child_process.spawn(command, cmdArgs, {\n                cwd: tempDir,\n                shell: true,\n            });\n            childProcess.on('exit', () => {\n                try {\n                    fs.unlinkSync(filePath);\n                }\n                catch (cleanupErr) {\n                    console.error(\"Cleanup error:\", cleanupErr);\n                }\n            });\n            resolve(childProcess);\n        }\n    });\n}\nfunction deactivate() {\n    activeProcesses.forEach(proc => {\n        try {\n            proc.kill('SIGKILL');\n        }\n        catch (e) {\n            console.error(\"Failed to kill process during deactivate:\", e);\n        }\n    });\n    activeProcesses.clear();\n    const tempDir = path.join(os.tmpdir(), \"vscode-advanced-code-runner-temp\");\n    if (fs.existsSync(tempDir)) {\n        try {\n            fs.rmSync(tempDir, { recursive: true, force: true });\n        }\n        catch (e) {\n            console.error(\"Failed to clean up temporary directory:\", e);\n        }\n    }\n}\n","module.exports = require(\"child_process\");","module.exports = require(\"vscode\");","module.exports = require(\"os\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["ownKeys","__createBinding","this","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","getOwnPropertyNames","ar","prototype","hasOwnProperty","call","length","mod","result","i","exports","activate","context","createCodeRunnerPanel","initialCode","initialLanguage","fileName","panel","vscode","window","createWebviewPanel","ViewColumn","One","enableScripts","retainContextWhenHidden","panelId","Date","now","Math","random","toString","substring","activeEditor","activeTextEditor","document","getText","detectedLang","detectLanguageFromFileName","path","basename","SUPPORTED_LANGUAGES","defaultFileName","webview","html","initialFileName","languageOptions","keys","map","lang","config","name","join","JSON","stringify","getWebviewContent","onDidReceiveMessage","async","message","command","language","code","args","activeProcesses","has","kill","delete","postMessage","output","startTime","process","Error","tempDir","os","tmpdir","fs","existsSync","mkdirSync","recursive","filePath","fileContent","workspaceFolders","workspace","workspaceFilePath","uri","fsPath","readFileSync","writeFileSync","Promise","resolve","reject","hasCompileStep","compileCommand","baseName","parse","exePath","platform","jsPath","child_process","exec","cwd","err","stdout","stderr","unlinkSync","e","runCommand","runArgs","push","split","childProcess","spawn","shell","on","classFile","cleanupErr","console","error","executeCompiledLanguage","then","catch","cmdArgs","fullCommand","executeInterpretedLanguage","runCodeProcess","set","data","chunk","lowerOutput","toLowerCase","some","pattern","includes","requiresInput","stdin","isError","executionTime","spawnErr","handleRunCode","handleClearOutput","input","writableEnded","write","handleSendInput","template","handleGetTemplate","showErrorMessage","showInformationMessage","handleSaveFile","formattedCode","indentLevel","lines","formattedLines","line","trimmed","trim","startsWith","max","indent","repeat","endsWith","formatCStyleCode","handleFormatCode","onDidDispose","subscriptions","commands","registerCommand","languageItems","key","label","selected","showQuickPick","placeHolder","showInputBox","prompt","showWarningMessage","openTextDocument","showTextDocument","createTemplateFile","executeCommand","deactivate","forEach","proc","clear","rmSync","force","cpp","extensions","supportsInput","c","python","java","javascript","typescript","go","rust","ruby","php","csharp","Map","ext","extname","entries","module","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}