(()=>{"use strict";var n={265:function(n,e,t){var o,i=this&&this.__createBinding||(Object.create?function(n,e,t,o){void 0===o&&(o=t);var i=Object.getOwnPropertyDescriptor(e,t);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[t]}}),Object.defineProperty(n,o,i)}:function(n,e,t,o){void 0===o&&(o=t),n[o]=e[t]}),r=this&&this.__setModuleDefault||(Object.create?function(n,e){Object.defineProperty(n,"default",{enumerable:!0,value:e})}:function(n,e){n.default=e}),a=this&&this.__importStar||(o=function(n){return o=Object.getOwnPropertyNames||function(n){var e=[];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[e.length]=t);return e},o(n)},function(n){if(n&&n.__esModule)return n;var e={};if(null!=n)for(var t=o(n),a=0;a<t.length;a++)"default"!==t[a]&&i(e,n,t[a]);return r(e,n),e});Object.defineProperty(e,"__esModule",{value:!0}),e.activate=function(n){n.subscriptions.push(p.commands.registerCommand("codeRunner.openPanel",()=>{const n=p.window.createWebviewPanel("codeRunner","Code Runner",p.ViewColumn.One,{enableScripts:!0,retainContextWhenHidden:!0}),e=`panel-${Date.now()}-${Math.random().toString(36).substring(7)}`,t=p.window.activeTextEditor;let o="",i="cpp";if(t){o=t.document.getText();const n=t.document.fileName;n.endsWith(".cpp")||n.endsWith(".c")?i="cpp":n.endsWith(".py")?i="python":n.endsWith(".c")&&(i="c")}n.webview.html=function(n,e){return`\n    <!DOCTYPE html>\n    <html lang="en">\n    <head>\n        <meta charset="UTF-8" />\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>Code Runner</title>\n        <style>\n            * {\n                box-sizing: border-box;\n                margin: 0;\n                padding: 0;\n            }\n\n            body {\n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n                background: #0d1117;\n                color: #c9d1d9;\n                min-height: 100vh;\n                display: flex;\n                flex-direction: column;\n                line-height: 1.5;\n            }\n\n            .header {\n                background: #161b22;\n                border-bottom: 1px solid #30363d;\n                padding: 20px 32px;\n            }\n\n            .header h1 {\n                font-size: 20px;\n                font-weight: 600;\n                color: #c9d1d9;\n                display: flex;\n                align-items: center;\n                gap: 12px;\n            }\n\n            .logo {\n                width: 24px;\n                height: 24px;\n                background: #58a6ff;\n                border-radius: 4px;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                color: #0d1117;\n                font-size: 12px;\n                font-weight: 700;\n            }\n\n            .container {\n                flex: 1;\n                max-width: 800px;\n                width: 100%;\n                margin: 0 auto;\n                padding: 32px;\n                display: flex;\n                flex-direction: column;\n                gap: 24px;\n            }\n\n            .controls {\n                background: #161b22;\n                border: 1px solid #30363d;\n                border-radius: 8px;\n                padding: 24px;\n                display: flex;\n                flex-direction: column;\n                gap: 16px;\n            }\n\n            .control-grid {\n                display: grid;\n                grid-template-columns: 1fr 140px 100px;\n                gap: 16px;\n                align-items: end;\n            }\n\n            .field {\n                display: flex;\n                flex-direction: column;\n                gap: 6px;\n            }\n\n            .label {\n                font-size: 13px;\n                font-weight: 500;\n                color: #8b949e;\n            }\n\n            .input, .select {\n                height: 40px;\n                padding: 8px 12px;\n                border: 1px solid #30363d;\n                border-radius: 6px;\n                font-size: 14px;\n                background: #0d1117;\n                color: #c9d1d9;\n                transition: border-color 0.2s ease;\n                outline: none;\n                font-family: ui-monospace, 'SF Mono', Monaco, 'Cascadia Code', monospace;\n            }\n\n            .input:focus, .select:focus {\n                border-color: #58a6ff;\n                box-shadow: inset 0 0 0 1px #58a6ff;\n            }\n\n            .run-button, .clear-button {\n                height: 40px;\n                color: #ffffff;\n                border: none;\n                border-radius: 6px;\n                font-size: 14px;\n                font-weight: 500;\n                cursor: pointer;\n                transition: background-color 0.2s ease;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                gap: 6px;\n                padding: 0 16px;\n            }\n\n            .run-button {\n                background: #238636;\n            }\n\n            .run-button:hover {\n                background: #2ea043;\n            }\n\n            .run-button:active {\n                background: #196c2e;\n            }\n\n            .clear-button {\n                background: #6a737d;\n            }\n\n            .clear-button:hover {\n                background: #8b949e;\n            }\n\n            .clear-button:active {\n                background: #545d68;\n            }\n\n            .output-section {\n                flex: 1;\n                background: #161b22;\n                border: 1px solid #30363d;\n                border-radius: 8px;\n                display: flex;\n                flex-direction: column;\n                min-height: 400px;\n            }\n\n            .output-header {\n                padding: 16px 20px;\n                border-bottom: 1px solid #30363d;\n                background: #21262d;\n                border-radius: 8px 8px 0 0;\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n            }\n\n            .output-title {\n                font-size: 14px;\n                font-weight: 600;\n                color: #c9d1d9;\n            }\n\n            .output-content {\n                flex: 1;\n                padding: 20px;\n                font-family: ui-monospace, 'SF Mono', Monaco, 'Cascadia Code', monospace;\n                font-size: 13px;\n                line-height: 1.6;\n                color: #c9d1d9;\n                background: #0d1117;\n                white-space: pre-wrap; /* Preserve whitespace and newlines */\n                word-wrap: break-word;\n                overflow-y: auto;\n                border-radius: 0 0 8px 8px;\n                display: flex;\n                flex-direction: column;\n            }\n\n            .output-content:empty:not(:has(.input-prompt-line))::before {\n                content: 'Run your code to see output here...';\n                color: #8b949e;\n                font-style: italic;\n            }\n\n            .play-icon {\n                width: 0;\n                height: 0;\n                border-left: 6px solid currentColor;\n                border-top: 4px solid transparent;\n                border-bottom: 4px solid transparent;\n                margin-left: 1px;\n            }\n\n            .input-prompt-line {\n                display: flex;\n                align-items: center;\n                margin-top: auto; /* Pushes input field to the bottom */\n                width: 100%;\n                box-sizing: border-box;\n            }\n\n            .input-prompt-line input {\n                flex-grow: 1;\n                padding: 5px 8px;\n                border: 1px solid #58a6ff;\n                border-radius: 4px;\n                background-color: #0d1117;\n                color: #ffffff;\n                font-family: ui-monospace, 'SF Mono', Monaco, 'Cascadia Code', monospace;\n                font-size: 13px;\n                outline: none;\n                margin-left: 5px;\n            }\n\n            .input-prompt-line input:focus {\n                box-shadow: 0 0 0 1px #58a6ff;\n            }\n\n            .input-prompt-prefix {\n                color: #58a6ff;\n                font-weight: bold;\n            }\n\n            @media (max-width: 640px) {\n                .container {\n                    padding: 20px 16px;\n                }\n\n                .control-grid {\n                    grid-template-columns: 1fr;\n                    gap: 16px;\n                }\n\n                .controls {\n                    padding: 20px;\n                }\n\n                .header {\n                    padding: 16px 20px;\n                }\n            }\n        </style>\n    </head>\n    <body>\n        <div class="header">\n            <h1>\n                <div class="logo">CR</div>\n                Code Runner\n            </h1>\n        </div>\n\n        <div class="container">\n            <div class="controls">\n                <div class="control-grid">\n                    <div class="field">\n                        <label class="label">File Name</label>\n                        <input type="text" class="input" id="fileName" placeholder="main.cpp" value="${"cpp"===e?"main.cpp":"c"===e?"main.c":"main.py"}" />\n                    </div>\n                    <div class="field">\n                        <label class="label">Language</label>\n                        <select class="select" id="language">\n                            <option value="cpp" ${"cpp"===e?"selected":""}>C++</option>\n                            <option value="c" ${"c"===e?"selected":""}>C</option>\n                            <option value="python" ${"python"===e?"selected":""}>Python</option>\n                        </select>\n                    </div>\n                    <button class="run-button" onclick="runCode()">\n                        <div class="play-icon"></div>\n                        Run\n                    </button>\n                </div>\n            </div>\n\n            <div class="output-section">\n                <div class="output-header">\n                    <div class="output-title">Output</div>\n                    <button class="clear-button" onclick="clearOutput()">Clear</button>\n                </div>\n                <div class="output-content" id="output">\n                    </div>\n            </div>\n        </div>\n\n        <script>\n            const vscode = acquireVsCodeApi();\n            const outputElement = document.getElementById("output");\n\n            document.getElementById('language').addEventListener('change', (event) => {\n                const language = event.target.value;\n                const fileNameInput = document.getElementById('fileName');\n                if (language === 'cpp') {\n                    fileNameInput.value = 'main.cpp';\n                } else if (language === 'c') {\n                    fileNameInput.value = 'main.c';\n                } else if (language === 'python') {\n                    fileNameInput.value = 'main.py';\n                }\n            });\n\n            function runCode() {\n                const fileName = document.getElementById("fileName").value;\n                const language = document.getElementById("language").value;\n\n                if (!fileName.trim()) {\n                    outputElement.innerHTML = "❌ Please enter a file name.";\n                    return;\n                }\n\n                outputElement.innerHTML = ""; // Clear existing output and input prompt\n                vscode.postMessage({ command: "runCode", code: "", language, fileName });\n            }\n\n            function clearOutput() {\n                outputElement.innerHTML = ""; // Clear HTML content\n                vscode.postMessage({ command: "clearOutput" });\n            }\n\n            function createInputPrompt() {\n                let inputPromptLine = outputElement.querySelector('.input-prompt-line');\n                if (!inputPromptLine) { // Only create if it doesn't exist\n                    inputPromptLine = document.createElement('div');\n                    inputPromptLine.className = 'input-prompt-line';\n                    inputPromptLine.innerHTML = \`\n                        <span class="input-prompt-prefix">&gt;</span>\n                        <input type="text" class="program-input-field" placeholder="">\n                    \`;\n                    outputElement.appendChild(inputPromptLine);\n                }\n\n                const inputField = inputPromptLine.querySelector('.program-input-field');\n                if (inputField) {\n                    inputField.value = ''; // Clear previous input\n                    inputField.disabled = false; // Enable if it was disabled\n                    inputField.focus(); // Focus the input field immediately\n\n                    // Ensure listener is only added once\n                    if (!inputField.dataset.listenerAdded) {\n                        inputField.dataset.listenerAdded = 'true'; // Mark as added\n                        inputField.addEventListener('keydown', function(event) {\n                            if (event.key === 'Enter') {\n                                const inputValue = inputField.value;\n                                inputField.disabled = true; // Disable input after sending\n                                vscode.postMessage({ command: 'sendInput', input: inputValue });\n                                // The input will be echoed by the extension's appendOutput, so no need to update DOM here directly\n                            }\n                        });\n                    }\n                }\n                // Scroll to bottom to show input field\n                outputElement.scrollTop = outputElement.scrollHeight;\n            }\n\n            function removeInputPrompt() {\n                const inputPromptLine = outputElement.querySelector('.input-prompt-line');\n                if (inputPromptLine) {\n                    inputPromptLine.remove();\n                }\n            }\n\n            window.addEventListener("message", (event) => {\n                const message = event.data;\n                switch (message.command) {\n                    case "appendOutput":\n                        // Create a span or div for each output chunk to maintain structure\n                        const outputSpan = document.createElement('span');\n                        outputSpan.textContent = message.output;\n                        // Before appending, remove the input prompt if it exists, then re-add if needed\n                        const existingInputPrompt = outputElement.querySelector('.input-prompt-line');\n                        if (existingInputPrompt) {\n                            outputElement.insertBefore(outputSpan, existingInputPrompt);\n                        } else {\n                            outputElement.appendChild(outputSpan);\n                        }\n                        // Explicitly add a newline after the prompt when input is requested\n                        // This fixes the cramped output like "Roll Number:Nishant"\n                        if (message.output.includes("Enter Roll Number:") || \n                            message.output.includes("Enter Name:") ||\n                            message.output.includes("Subject ") && message.output.includes(": ") ||\n                            message.output.includes("Enter number of students:")) {\n                                outputElement.appendChild(document.createElement('br')); // Add a line break for visual separation\n                        }\n                        outputElement.scrollTop = outputElement.scrollHeight; // Scroll to bottom\n                        break;\n                    case "clearOutput":\n                        outputElement.innerHTML = "";\n                        break;\n                    case "requestInput":\n                        createInputPrompt();\n                        break;\n                    case "removeInputPrompt":\n                        removeInputPrompt();\n                        break;\n                }\n            });\n        <\/script>\n    </body>\n    </html>\n  `}(0,i),n.webview.onDidReceiveMessage(async t=>{if("runCode"===t.command){const o=t.language,i=t.fileName;if(c.has(e)&&(c.get(e)?.kill("SIGKILL"),c.delete(e),n.webview.postMessage({command:"removeInputPrompt"})),!i)return void n.webview.postMessage({command:"appendOutput",output:"❌ Error: Please enter a file name (e.g., main.cpp).\n"});n.webview.postMessage({command:"clearOutput"}),n.webview.postMessage({command:"appendOutput",output:"Running code...\n"});try{const t=await async function(n,e){const t=u.join(l.tmpdir(),"vscode-code-runner-temp");d.existsSync(t)||d.mkdirSync(t,{recursive:!0});const o=u.join(t,e),i=p.workspace.workspaceFolders;if(!i)throw new Error("No workspace folder is open. Please open a folder containing your code files.");const r=u.join(i[0].uri.fsPath,e);if(!d.existsSync(r))throw new Error(`File "${e}" not found in workspace. Please ensure the file exists in your workspace folder.`);const a=d.readFileSync(r,"utf8");return d.writeFileSync(o,a),new Promise((i,r)=>{let a,p;if("cpp"===n||"c"===n){const c=u.join(t,u.parse(e).name+("win32"===l.platform()?".exe":""));a="cpp"===n?"g++":"gcc";const m=`${a} "${o}" -o "${c}"`;s.exec(m,{cwd:t},(n,e,a)=>{if(n){try{d.unlinkSync(o)}catch(n){}return r(new Error(`Compilation failed:\n${a||e||n.message}`))}const u="win32"===l.platform()?`"${c}"`:c;p=s.spawn(u,[],{cwd:t,shell:!0}),p.on("exit",()=>{try{d.unlinkSync(o),d.existsSync(c)&&d.unlinkSync(c)}catch(n){console.error("Cleanup error:",n)}}),i(p)})}else"python"===n?(a="python",p=s.spawn(a,[o],{cwd:t,shell:!0}),p.on("exit",()=>{try{d.unlinkSync(o)}catch(n){console.error("Cleanup error:",n)}}),i(p)):r("Language not supported.")})}(o,i);c.set(e,t),t.stdout.on("data",e=>{const o=e.toString();n.webview.postMessage({command:"appendOutput",output:o});const i=o.toLowerCase();(i.includes("enter")||i.includes("subject")&&i.includes(":")||i.includes("name:")||i.includes("students:"))&&t.stdin.writable&&n.webview.postMessage({command:"requestInput"})}),t.stderr.on("data",e=>{const o=e.toString();n.webview.postMessage({command:"appendOutput",output:`Error: ${o}`}),t.stdin.writable&&n.webview.postMessage({command:"requestInput"})}),t.on("close",t=>{n.webview.postMessage({command:"removeInputPrompt"}),c.delete(e),0!==t?n.webview.postMessage({command:"appendOutput",output:`\nProgram exited with code ${t}.`}):n.webview.postMessage({command:"appendOutput",output:"\nProgram finished."})}),t.on("error",t=>{n.webview.postMessage({command:"appendOutput",output:`\n❌ Failed to run program: ${t.message}`}),n.webview.postMessage({command:"removeInputPrompt"}),c.delete(e)})}catch(t){n.webview.postMessage({command:"appendOutput",output:`\n❌ Error: ${t.message||t.toString()}`}),n.webview.postMessage({command:"removeInputPrompt"}),c.delete(e)}}else if("clearOutput"===t.command)n.webview.postMessage({command:"clearOutput"}),n.webview.postMessage({command:"removeInputPrompt"}),c.has(e)&&(c.get(e)?.kill("SIGKILL"),c.delete(e));else if("sendInput"===t.command){const o=t.input,i=c.get(e);i&&i.stdin&&!i.stdin.writableEnded?(n.webview.postMessage({command:"appendOutput",output:o+"\n"}),i.stdin.write(o+"\n"),n.webview.postMessage({command:"removeInputPrompt"})):(n.webview.postMessage({command:"appendOutput",output:"\nNo active program to send input to or stdin not writable.\n"}),n.webview.postMessage({command:"removeInputPrompt"}))}}),n.onDidDispose(()=>{c.has(e)&&(c.get(e)?.kill("SIGKILL"),c.delete(e))})}))},e.deactivate=function(){c.forEach(n=>{try{n.kill("SIGKILL")}catch(n){console.error("Failed to kill process during deactivate:",n)}}),c.clear();const n=u.join(l.tmpdir(),"vscode-code-runner-temp");if(d.existsSync(n))try{d.rmSync(n,{recursive:!0,force:!0})}catch(n){console.error("Failed to clean up temporary directory:",n)}};const p=a(t(398)),s=a(t(317)),u=a(t(928)),d=a(t(896)),l=a(t(857)),c=new Map},317:n=>{n.exports=require("child_process")},398:n=>{n.exports=require("vscode")},857:n=>{n.exports=require("os")},896:n=>{n.exports=require("fs")},928:n=>{n.exports=require("path")}},e={},t=function t(o){var i=e[o];if(void 0!==i)return i.exports;var r=e[o]={exports:{}};return n[o].call(r.exports,r,r.exports,t),r.exports}(265);module.exports=t})();
//# sourceMappingURL=extension.js.map