(()=>{"use strict";var n={265:function(n,e,t){var o,a=this&&this.__createBinding||(Object.create?function(n,e,t,o){void 0===o&&(o=t);var a=Object.getOwnPropertyDescriptor(e,t);a&&!("get"in a?!e.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return e[t]}}),Object.defineProperty(n,o,a)}:function(n,e,t,o){void 0===o&&(o=t),n[o]=e[t]}),i=this&&this.__setModuleDefault||(Object.create?function(n,e){Object.defineProperty(n,"default",{enumerable:!0,value:e})}:function(n,e){n.default=e}),s=this&&this.__importStar||(o=function(n){return o=Object.getOwnPropertyNames||function(n){var e=[];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[e.length]=t);return e},o(n)},function(n){if(n&&n.__esModule)return n;var e={};if(null!=n)for(var t=o(n),s=0;s<t.length;s++)"default"!==t[s]&&a(e,n,t[s]);return i(e,n),e});Object.defineProperty(e,"__esModule",{value:!0}),e.activate=function(n){function e(n,e,t){const o=r.window.createWebviewPanel("codeRunner","Advanced Code Runner",r.ViewColumn.One,{enableScripts:!0,retainContextWhenHidden:!0}),a=`panel-${Date.now()}-${Math.random().toString(36).substring(7)}`;if(!n||!e){const o=r.window.activeTextEditor;if(o){n=n||o.document.getText();const a=g(o.document.fileName);e=e||a||"cpp",t=t||l.basename(o.document.fileName)}else n=n||"",e=e||"cpp",t=t||d[e].defaultFileName}o.webview.html=function(n,e,t){const o=Object.keys(d).map(n=>{const t=d[n];return`<option value="${n}" ${n===e?"selected":""}>${t.name}</option>`}).join("");return`\n    <!DOCTYPE html>\n    <html lang="en">\n    <head>\n        <meta charset="UTF-8" />\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>Advanced Code Runner</title>\n        <style>\n            * {\n                box-sizing: border-box;\n                margin: 0;\n                padding: 0;\n            }\n\n            body {\n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n                background: #0d1117;\n                color: #c9d1d9;\n                min-height: 100vh;\n                display: flex;\n                flex-direction: column;\n                line-height: 1.5;\n            }\n\n            .header {\n                background: linear-gradient(135deg, #161b22, #1c2128);\n                border-bottom: 1px solid #30363d;\n                padding: 20px 32px;\n                box-shadow: 0 2px 8px rgba(0,0,0,0.3);\n            }\n\n            .header h1 {\n                font-size: 20px;\n                font-weight: 600;\n                color: #c9d1d9;\n                display: flex;\n                align-items: center;\n                gap: 12px;\n            }\n\n            .logo {\n                width: 28px;\n                height: 28px;\n                background: linear-gradient(135deg, #58a6ff, #388bfd);\n                border-radius: 6px;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                color: #ffffff;\n                font-size: 12px;\n                font-weight: 700;\n                box-shadow: 0 2px 8px rgba(88,166,255,0.3);\n            }\n\n            .container {\n                flex: 1;\n                max-width: 1200px;\n                width: 100%;\n                margin: 0 auto;\n                padding: 32px;\n                display: flex;\n                flex-direction: column;\n                gap: 24px;\n            }\n\n            .controls {\n                background: #161b22;\n                border: 1px solid #30363d;\n                border-radius: 12px;\n                padding: 24px;\n                display: flex;\n                flex-direction: column;\n                gap: 20px;\n                box-shadow: 0 4px 16px rgba(0,0,0,0.2);\n            }\n\n            .control-row {\n                display: grid;\n                grid-template-columns: 1fr 180px 120px 100px 100px;\n                gap: 16px;\n                align-items: end;\n            }\n\n            .control-actions {\n                display: flex;\n                gap: 12px;\n                justify-content: flex-end;\n                margin-top: 16px;\n            }\n\n            .field {\n                display: flex;\n                flex-direction: column;\n                gap: 8px;\n            }\n\n            .label {\n                font-size: 13px;\n                font-weight: 500;\n                color: #8b949e;\n                display: flex;\n                align-items: center;\n                gap: 6px;\n            }\n\n            .input, .select, .textarea {\n                height: 42px;\n                padding: 10px 14px;\n                border: 1px solid #30363d;\n                border-radius: 8px;\n                font-size: 14px;\n                background: #0d1117;\n                color: #c9d1d9;\n                transition: all 0.2s ease;\n                outline: none;\n                font-family: ui-monospace, 'SF Mono', Monaco, 'Cascadia Code', monospace;\n            }\n\n            .textarea {\n                height: auto;\n                min-height: 42px;\n                resize: vertical;\n                font-family: ui-monospace, 'SF Mono', Monaco, 'Cascadia Code', monospace;\n            }\n\n            .input:focus, .select:focus, .textarea:focus {\n                border-color: #58a6ff;\n                box-shadow: 0 0 0 2px rgba(88,166,255,0.2);\n            }\n\n            .btn {\n                height: 42px;\n                color: #ffffff;\n                border: none;\n                border-radius: 8px;\n                font-size: 14px;\n                font-weight: 500;\n                cursor: pointer;\n                transition: all 0.2s ease;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                gap: 8px;\n                padding: 0 16px;\n                position: relative;\n                overflow: hidden;\n            }\n\n            .btn-primary {\n                background: linear-gradient(135deg, #238636, #2ea043);\n                box-shadow: 0 2px 8px rgba(35,134,54,0.3);\n            }\n\n            .btn-primary:hover {\n                background: linear-gradient(135deg, #2ea043, #46954a);\n                transform: translateY(-1px);\n                box-shadow: 0 4px 16px rgba(35,134,54,0.4);\n            }\n\n            .btn-secondary {\n                background: linear-gradient(135deg, #6a737d, #8b949e);\n            }\n\n            .btn-secondary:hover {\n                background: linear-gradient(135deg, #8b949e, #9ca3a9);\n                transform: translateY(-1px);\n            }\n\n            .btn-outline {\n                background: transparent;\n                border: 1px solid #30363d;\n                color: #c9d1d9;\n            }\n\n            .btn-outline:hover {\n                background: #21262d;\n                border-color: #58a6ff;\n            }\n\n            .output-section {\n                flex: 1;\n                background: #161b22;\n                border: 1px solid #30363d;\n                border-radius: 12px;\n                display: flex;\n                flex-direction: column;\n                min-height: 400px;\n                box-shadow: 0 4px 16px rgba(0,0,0,0.2);\n            }\n\n            .output-header {\n                padding: 16px 20px;\n                border-bottom: 1px solid #30363d;\n                background: #21262d;\n                border-radius: 12px 12px 0 0;\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n            }\n\n            .output-title {\n                font-size: 14px;\n                font-weight: 600;\n                color: #c9d1d9;\n                display: flex;\n                align-items: center;\n                gap: 8px;\n            }\n\n            .status-indicator {\n                width: 8px;\n                height: 8px;\n                border-radius: 50%;\n                background: #6a737d;\n                animation: pulse 2s infinite;\n            }\n\n            .status-indicator.running {\n                background: #f85149;\n                animation: pulse 1s infinite;\n            }\n\n            .status-indicator.success {\n                background: #3fb950;\n                animation: none;\n            }\n\n            @keyframes pulse {\n                0%, 100% { opacity: 1; }\n                50% { opacity: 0.5; }\n            }\n\n            .output-content {\n                flex: 1;\n                padding: 20px;\n                font-family: ui-monospace, 'SF Mono', Monaco, 'Cascadia Code', monospace;\n                font-size: 13px;\n                line-height: 1.6;\n                color: #c9d1d9;\n                background: #0d1117;\n                white-space: pre-wrap;\n                word-wrap: break-word;\n                overflow-y: auto;\n                border-radius: 0 0 12px 12px;\n                display: flex;\n                flex-direction: column;\n            }\n\n            .output-content:empty:not(:has(.input-prompt-line))::before {\n                content: '🚀 Ready to run your code! Select a language and hit Run.';\n                color: #8b949e;\n                font-style: italic;\n            }\n\n            .play-icon {\n                width: 0;\n                height: 0;\n                border-left: 8px solid currentColor;\n                border-top: 5px solid transparent;\n                border-bottom: 5px solid transparent;\n                margin-left: 2px;\n            }\n\n            .icon {\n                width: 16px;\n                height: 16px;\n                fill: currentColor;\n            }\n\n            .input-prompt-line {\n                display: flex;\n                align-items: center;\n                margin-top: auto;\n                width: 100%;\n                box-sizing: border-box;\n                background: rgba(88,166,255,0.1);\n                padding: 8px;\n                border-radius: 6px;\n                border: 1px solid rgba(88,166,255,0.3);\n            }\n\n            .input-prompt-line input {\n                flex-grow: 1;\n                padding: 8px 12px;\n                border: 1px solid #58a6ff;\n                border-radius: 6px;\n                background-color: #0d1117;\n                color: #ffffff;\n                font-family: ui-monospace, 'SF Mono', Monaco, 'Cascadia Code', monospace;\n                font-size: 13px;\n                outline: none;\n                margin-left: 8px;\n            }\n\n            .input-prompt-prefix {\n                color: #58a6ff;\n                font-weight: bold;\n                display: flex;\n                align-items: center;\n                gap: 4px;\n            }\n\n            .language-info {\n                background: rgba(88,166,255,0.1);\n                border: 1px solid rgba(88,166,255,0.3);\n                border-radius: 6px;\n                padding: 12px;\n                margin-bottom: 16px;\n                font-size: 12px;\n                color: #8b949e;\n            }\n\n            .args-field {\n                grid-column: span 2;\n            }\n\n            @media (max-width: 768px) {\n                .container {\n                    padding: 20px 16px;\n                }\n\n                .control-row {\n                    grid-template-columns: 1fr;\n                    gap: 16px;\n                }\n\n                .control-actions {\n                    flex-direction: column;\n                }\n\n                .header {\n                    padding: 16px 20px;\n                }\n            }\n        </style>\n    </head>\n    <body>\n        <div class="header">\n            <h1>\n                <div class="logo">ACR</div>\n                Advanced Code Runner\n            </h1>\n        </div>\n\n        <div class="container">\n            <div class="controls">\n                <div id="languageInfo" class="language-info"></div>\n                \n                <div class="control-row">\n                    <div class="field">\n                        <label class="label">📄 File Name</label>\n                        <input type="text" class="input" id="fileName" placeholder="main.cpp" value="${t||d[e]?.defaultFileName||"main.cpp"}" />\n                    </div>\n                    <div class="field">\n                        <label class="label">🌐 Language</label>\n                        <select class="select" id="language">\n                            ${o}\n                        </select>\n                    </div>\n                    <div class="field args-field">\n                        <label class="label">⚙️ Arguments (optional)</label>\n                        <input type="text" class="input" id="args" placeholder="arg1 arg2..." />\n                    </div>\n                </div>\n\n                <div class="control-actions">\n                    <button class="btn btn-outline" onclick="loadTemplate()">\n                        📋 Load Template\n                    </button>\n                    <button class="btn btn-outline" onclick="saveFile()">\n                        💾 Save File\n                    </button>\n                    <button class="btn btn-outline" onclick="formatCode()">\n                        ✨ Format\n                    </button>\n                    <button class="btn btn-secondary" onclick="clearOutput()">\n                        🗑️ Clear\n                    </button>\n                    <button class="btn btn-primary" onclick="runCode()">\n                        <div class="play-icon"></div>\n                        Run Code\n                    </button>\n                </div>\n            </div>\n\n            <div class="output-section">\n                <div class="output-header">\n                    <div class="output-title">\n                        <div class="status-indicator" id="statusIndicator"></div>\n                        Output Console\n                    </div>\n                    <div id="executionTime" style="font-size: 12px; color: #8b949e;"></div>\n                </div>\n                <div class="output-content" id="output"></div>\n            </div>\n        </div>\n\n        <script>\n            const vscode = acquireVsCodeApi();\n            const outputElement = document.getElementById("output");\n            const statusIndicator = document.getElementById("statusIndicator");\n            const languageSelect = document.getElementById('language');\n            const fileNameInput = document.getElementById('fileName');\n            const languageInfo = document.getElementById('languageInfo');\n\n            // Language configurations\n            const languages = ${JSON.stringify(d)};\n\n            function updateLanguageInfo() {\n                const selectedLang = languageSelect.value;\n                const config = languages[selectedLang];\n                if (config) {\n                    languageInfo.innerHTML = \`\n                        <strong>\${config.name}</strong> • \n                        Extensions: \${config.extensions.join(', ')} • \n                        \${config.hasCompileStep ? 'Compiled' : 'Interpreted'} • \n                        \${config.supportsInput ? 'Supports Input' : 'No Input Support'}\n                    \`;\n                }\n            }\n\n            languageSelect.addEventListener('change', (event) => {\n                const language = event.target.value;\n                const config = languages[language];\n                if (config) {\n                    fileNameInput.value = config.defaultFileName;\n                    updateLanguageInfo();\n                }\n            });\n\n            function runCode() {\n                const fileName = fileNameInput.value.trim();\n                const language = languageSelect.value;\n                const args = document.getElementById("args").value.trim();\n\n                if (!fileName) {\n                    outputElement.innerHTML = "❌ Please enter a file name.";\n                    return;\n                }\n\n                statusIndicator.className = "status-indicator running";\n                outputElement.innerHTML = "";\n                vscode.postMessage({ \n                    command: "runCode", \n                    language, \n                    fileName, \n                    args: args || null \n                });\n            }\n\n            function clearOutput() {\n                outputElement.innerHTML = "";\n                statusIndicator.className = "status-indicator";\n                vscode.postMessage({ command: "clearOutput" });\n            }\n\n            function loadTemplate() {\n                const language = languageSelect.value;\n                vscode.postMessage({ command: "getTemplate", language });\n            }\n\n            function saveFile() {\n                const fileName = fileNameInput.value.trim();\n                if (!fileName) {\n                    alert("Please enter a file name.");\n                    return;\n                }\n                // For now, we'll save empty content - could be enhanced to get code from editor\n                vscode.postMessage({ command: "saveFile", fileName, code: "" });\n            }\n\n            function formatCode() {\n                const language = languageSelect.value;\n                // For now, we'll format empty content - could be enhanced to get code from editor\n                vscode.postMessage({ command: "formatCode", language, code: "" });\n            }\n\n            function createInputPrompt() {\n                let inputPromptLine = outputElement.querySelector('.input-prompt-line');\n                if (!inputPromptLine) {\n                    inputPromptLine = document.createElement('div');\n                    inputPromptLine.className = 'input-prompt-line';\n                    inputPromptLine.innerHTML = \`\n                        <span class="input-prompt-prefix">\n                            ⌨️ Input:\n                        </span>\n                        <input type="text" class="program-input-field" placeholder="Type your input here...">\n                    \`;\n                    outputElement.appendChild(inputPromptLine);\n                }\n\n                const inputField = inputPromptLine.querySelector('.program-input-field');\n                if (inputField) {\n                    inputField.value = '';\n                    inputField.disabled = false;\n                    inputField.focus();\n\n                    if (!inputField.dataset.listenerAdded) {\n                        inputField.dataset.listenerAdded = 'true';\n                        inputField.addEventListener('keydown', function(event) {\n                            if (event.key === 'Enter') {\n                                const inputValue = inputField.value;\n                                inputField.disabled = true;\n                                vscode.postMessage({ command: 'sendInput', input: inputValue });\n                            }\n                        });\n                    }\n                }\n                outputElement.scrollTop = outputElement.scrollHeight;\n            }\n\n            function removeInputPrompt() {\n                const inputPromptLine = outputElement.querySelector('.input-prompt-line');\n                if (inputPromptLine) {\n                    inputPromptLine.remove();\n                }\n            }\n\n            window.addEventListener("message", (event) => {\n                const message = event.data;\n                switch (message.command) {\n                    case "appendOutput":\n                        const outputSpan = document.createElement('span');\n                        outputSpan.textContent = message.output;\n                        if (message.isError) {\n                            outputSpan.style.color = '#f85149';\n                        }\n                        \n                        const existingInputPrompt = outputElement.querySelector('.input-prompt-line');\n                        if (existingInputPrompt) {\n                            outputElement.insertBefore(outputSpan, existingInputPrompt);\n                        } else {\n                            outputElement.appendChild(outputSpan);\n                        }\n                        \n                        outputElement.scrollTop = outputElement.scrollHeight;\n                        \n                        // Update status for completion messages\n                        if (message.output.includes('✅ Program finished')) {\n                            statusIndicator.className = "status-indicator success";\n                        }\n                        break;\n                        \n                    case "clearOutput":\n                        outputElement.innerHTML = "";\n                        statusIndicator.className = "status-indicator";\n                        break;\n                        \n                    case "requestInput":\n                        createInputPrompt();\n                        break;\n                        \n                    case "removeInputPrompt":\n                        removeInputPrompt();\n                        break;\n                        \n                    case "setTemplate":\n                        // Could be enhanced to populate a code editor\n                        alert("Template loaded! Check your workspace for the new file.");\n                        break;\n                        \n                    case "setFormattedCode":\n                        // Could be enhanced to update a code editor\n                        alert("Code formatted!");\n                        break;\n                }\n            });\n\n            // Initialize\n            updateLanguageInfo();\n        <\/script>\n    </body>\n    </html>\n  `}(0,e,t),o.webview.onDidReceiveMessage(async n=>{switch(n.command){case"runCode":await async function(n,e,t){const{language:o,fileName:a,code:i,args:s}=t;if(m.has(e)&&(m.get(e)?.kill("SIGKILL"),m.delete(e),n.webview.postMessage({command:"removeInputPrompt"})),!a)return void n.webview.postMessage({command:"appendOutput",output:"❌ Error: Please enter a file name.\n"});n.webview.postMessage({command:"clearOutput"}),n.webview.postMessage({command:"appendOutput",output:`🚀 Running ${d[o]?.name||o} code...\n`});const g=Date.now();try{const t=await async function(n,e,t,o){const a=d[n];if(!a)throw new Error(`Unsupported language: ${n}`);const i=l.join(u.tmpdir(),"vscode-advanced-code-runner-temp");c.existsSync(i)||c.mkdirSync(i,{recursive:!0});const s=l.join(i,e);let m=t;if(!m){const n=r.workspace.workspaceFolders;if(!n)throw new Error("No workspace folder is open. Please open a folder containing your code files.");const t=l.join(n[0].uri.fsPath,e);if(!c.existsSync(t))throw new Error(`File "${e}" not found in workspace. Please ensure the file exists in your workspace folder.`);m=c.readFileSync(t,"utf8")}return c.writeFileSync(s,m),new Promise((e,t)=>{a.hasCompileStep&&a.compileCommand?async function(n,e,t,o,a){return new Promise((i,s)=>{const r=l.basename(t),d=l.parse(r).name,m=l.join(o,d+("win32"===u.platform()?".exe":""));let g;switch(n){case"cpp":case"c":g=`${e.compileCommand} "${t}" -o "${m}"`;break;case"java":g=`javac "${t}"`;break;case"csharp":g=`csc "${t}" -out:"${m}"`;break;case"typescript":const a=l.join(o,d+".js");g=`${e.compileCommand} "${t}" --outFile "${a}"`;break;default:return s(new Error(`Compilation not implemented for ${n}`))}p.exec(g,{cwd:o},(e,r,g)=>{if(e){try{c.unlinkSync(t)}catch(n){}return s(new Error(`Compilation failed:\\n${g||r||e.message}`))}let f,b=[];switch(n){case"cpp":case"c":case"csharp":f="win32"===u.platform()?`"${m}"`:m;break;case"java":f="java",b=["-cp",o,d];break;case"typescript":f="node",b=[l.join(o,d+".js")];break;default:return s(new Error(`Execution not implemented for ${n}`))}a&&b.push(...a.split(" "));const x=p.spawn(f,b,{cwd:o,shell:!0});x.on("exit",()=>{try{if(c.unlinkSync(t),c.existsSync(m)&&c.unlinkSync(m),"java"===n){const n=l.join(o,d+".class");c.existsSync(n)&&c.unlinkSync(n)}if("typescript"===n){const n=l.join(o,d+".js");c.existsSync(n)&&c.unlinkSync(n)}}catch(n){console.error("Cleanup error:",n)}}),i(x)})})}(n,a,s,i,o).then(e).catch(t):async function(n,e,t,o,a){return new Promise((e,i)=>{let s,r=[];switch(n){case"python":s="python",r=[t];break;case"javascript":s="node",r=[t];break;case"go":s="go",r=["run",t];break;case"rust":const e=l.basename(t),a=l.parse(e).name,p=l.join(o,a+("win32"===u.platform()?".exe":""));s="rustc",r=[t,"-o",p,"&&",p];break;case"ruby":s="ruby",r=[t];break;case"php":s="php",r=[t];break;default:return i(new Error(`Language ${n} not supported yet`))}if(a&&r.push(...a.split(" ")),"rust"===n){const n=r.join(" "),a=p.spawn(n,[],{cwd:o,shell:!0});a.on("exit",()=>{try{c.unlinkSync(t);const n=l.basename(t),e=l.parse(n).name,a=l.join(o,e+("win32"===u.platform()?".exe":""));c.existsSync(a)&&c.unlinkSync(a)}catch(n){console.error("Cleanup error:",n)}}),e(a)}else{const n=p.spawn(s,r,{cwd:o,shell:!0});n.on("exit",()=>{try{c.unlinkSync(t)}catch(n){console.error("Cleanup error:",n)}}),e(n)}})}(n,0,s,i,o).then(e).catch(t)})}(o,a,i,s);m.set(e,t),t.stdout.on("data",e=>{const o=e.toString();n.webview.postMessage({command:"appendOutput",output:o}),function(n){const e=n.toLowerCase();return["enter","input","type","name:","age:","number:","choose","select","press",":",">","scanf","cin >>","readline","input()","gets","getchar"].some(n=>e.includes(n))}(o)&&t.stdin.writable&&n.webview.postMessage({command:"requestInput"})}),t.stderr.on("data",e=>{const t=e.toString();n.webview.postMessage({command:"appendOutput",output:`🔴 ${t}`,isError:!0})}),t.on("close",t=>{const o=Date.now()-g;n.webview.postMessage({command:"removeInputPrompt"}),m.delete(e),0!==t?n.webview.postMessage({command:"appendOutput",output:`\n❌ Program exited with code ${t} (${o}ms)`}):n.webview.postMessage({command:"appendOutput",output:`\n✅ Program finished successfully (${o}ms)`})}),t.on("error",t=>{n.webview.postMessage({command:"appendOutput",output:`\n❌ Failed to run program: ${t.message}`}),n.webview.postMessage({command:"removeInputPrompt"}),m.delete(e)})}catch(t){n.webview.postMessage({command:"appendOutput",output:`\n❌ Error: ${t.message||t.toString()}`}),n.webview.postMessage({command:"removeInputPrompt"}),m.delete(e)}}(o,a,n);break;case"clearOutput":!function(n,e){n.webview.postMessage({command:"clearOutput"}),n.webview.postMessage({command:"removeInputPrompt"}),m.has(e)&&(m.get(e)?.kill("SIGKILL"),m.delete(e))}(o,a);break;case"sendInput":!function(n,e,t){const o=m.get(e);o&&o.stdin&&!o.stdin.writableEnded?(n.webview.postMessage({command:"appendOutput",output:t+"\n"}),o.stdin.write(t+"\n"),n.webview.postMessage({command:"removeInputPrompt"})):(n.webview.postMessage({command:"appendOutput",output:"\n❌ No active program to send input to.\n"}),n.webview.postMessage({command:"removeInputPrompt"}))}(o,a,n.input);break;case"getTemplate":!function(n,e){const t=d[e];t&&n.webview.postMessage({command:"setTemplate",template:t.template,fileName:t.defaultFileName})}(o,n.language);break;case"saveFile":await async function(n,e){const t=r.workspace.workspaceFolders;if(!t)return void r.window.showErrorMessage("No workspace folder is open.");const o=l.join(t[0].uri.fsPath,n);try{c.writeFileSync(o,e,"utf8"),r.window.showInformationMessage(`File saved: ${n}`)}catch(n){r.window.showErrorMessage(`Failed to save file: ${n}`)}}(n.fileName,n.code);break;case"formatCode":await async function(n,e,t){let o=t;["cpp","c","java","csharp","javascript","typescript"].includes(e)&&(o=function(n){let e=0;const t=n.split("\n"),o=[];for(let n of t){const t=n.trim();if(!t){o.push("");continue}t.startsWith("}")&&(e=Math.max(0,e-1));const a="    ".repeat(e);o.push(a+t),t.endsWith("{")&&e++}return o.join("\n")}(t)),n.webview.postMessage({command:"setFormattedCode",code:o})}(o,n.language,n.code)}}),o.onDidDispose(()=>{m.has(a)&&(m.get(a)?.kill("SIGKILL"),m.delete(a))})}n.subscriptions.push(r.commands.registerCommand("codeRunner.openPanel",()=>{e()})),n.subscriptions.push(r.commands.registerCommand("codeRunner.runCurrentFile",()=>{const n=r.window.activeTextEditor;if(!n)return void r.window.showErrorMessage("No active file to run.");const t=l.basename(n.document.fileName),o=g(t);o?e(n.document.getText(),o,t):r.window.showErrorMessage("Unsupported file type for code runner.")})),n.subscriptions.push(r.commands.registerCommand("codeRunner.createTemplate",async()=>{const n=Object.keys(d).map(n=>({label:d[n].name,value:n})),e=await r.window.showQuickPick(n,{placeHolder:"Select a language template to create"});if(e){const n=d[e.value],t=await r.window.showInputBox({prompt:`Enter filename for ${n.name} template`,value:n.defaultFileName});t&&async function(n,e,t){const o=r.workspace.workspaceFolders;if(!o)return void r.window.showErrorMessage("No workspace folder is open.");const a=l.join(o[0].uri.fsPath,e);if(!c.existsSync(a)||"Yes"===await r.window.showWarningMessage(`File ${e} already exists. Overwrite?`,"Yes","No"))try{c.writeFileSync(a,t,"utf8"),r.window.showInformationMessage(`Template created: ${e}`);const n=await r.workspace.openTextDocument(a);await r.window.showTextDocument(n)}catch(n){r.window.showErrorMessage(`Failed to create template: ${n}`)}}(e.value,t,n.template)}})),n.subscriptions.push(r.commands.registerCommand("codeRunner.openSettings",()=>{r.commands.executeCommand("workbench.action.openSettings","codeRunner")}))},e.deactivate=function(){m.forEach(n=>{try{n.kill("SIGKILL")}catch(n){console.error("Failed to kill process during deactivate:",n)}}),m.clear();const n=l.join(u.tmpdir(),"vscode-advanced-code-runner-temp");if(c.existsSync(n))try{c.rmSync(n,{recursive:!0,force:!0})}catch(n){console.error("Failed to clean up temporary directory:",n)}};const r=s(t(398)),p=s(t(317)),l=s(t(928)),c=s(t(896)),u=s(t(857)),d={cpp:{name:"C++",extensions:[".cpp",".cxx",".cc"],defaultFileName:"main.cpp",compileCommand:"g++ -std=c++17 -O2 -Wall",runCommand:"{executable}",hasCompileStep:!0,supportsInput:!0,template:'#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nint main() {\n    cout << "Hello, C++!" << endl;\n    return 0;\n}'},c:{name:"C",extensions:[".c"],defaultFileName:"main.c",compileCommand:"gcc -std=c11 -O2 -Wall",runCommand:"{executable}",hasCompileStep:!0,supportsInput:!0,template:'#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    printf("Hello, C!\\n");\n    return 0;\n}'},python:{name:"Python",extensions:[".py"],defaultFileName:"main.py",runCommand:"python {file}",hasCompileStep:!1,supportsInput:!0,template:'#!/usr/bin/env python3\n"""\nPython Code Runner Template\n"""\n\ndef main():\n    print("Hello, Python!")\n\nif __name__ == "__main__":\n    main()'},java:{name:"Java",extensions:[".java"],defaultFileName:"Main.java",compileCommand:"javac",runCommand:"java {className}",hasCompileStep:!0,supportsInput:!0,template:'public class Main {\n    public static void main(String[] args) {\n        System.out.println("Hello, Java!");\n    }\n}'},javascript:{name:"JavaScript",extensions:[".js"],defaultFileName:"main.js",runCommand:"node {file}",hasCompileStep:!1,supportsInput:!0,template:"// JavaScript Code Runner Template\nconsole.log(\"Hello, JavaScript!\");\n\n// Example with user input (uncomment to use)\n// const readline = require('readline');\n// const rl = readline.createInterface({\n//     input: process.stdin,\n//     output: process.stdout\n// });\n// rl.question('Enter your name: ', (name) => {\n//     console.log(`Hello, ${name}!`);\n//     rl.close();\n// });"},typescript:{name:"TypeScript",extensions:[".ts"],defaultFileName:"main.ts",compileCommand:"tsc --target es2020 --module commonjs",runCommand:"node {jsFile}",hasCompileStep:!0,supportsInput:!0,template:'// TypeScript Code Runner Template\ninterface Greeter {\n    name: string;\n}\n\nfunction greet(greeter: Greeter): void {\n    console.log(`Hello, ${greeter.name}!`);\n}\n\nconst user: Greeter = { name: "TypeScript" };\ngreet(user);'},go:{name:"Go",extensions:[".go"],defaultFileName:"main.go",runCommand:"go run {file}",hasCompileStep:!1,supportsInput:!0,template:'package main\n\nimport (\n    "fmt"\n    "bufio"\n    "os"\n)\n\nfunc main() {\n    fmt.Println("Hello, Go!")\n    \n    // Example with user input (uncomment to use)\n    // fmt.Print("Enter your name: ")\n    // scanner := bufio.NewScanner(os.Stdin)\n    // scanner.Scan()\n    // name := scanner.Text()\n    // fmt.Printf("Hello, %s!\\n", name)\n}'},rust:{name:"Rust",extensions:[".rs"],defaultFileName:"main.rs",runCommand:"rustc {file} -o {executable} && {executable}",hasCompileStep:!1,supportsInput:!0,template:'use std::io;\n\nfn main() {\n    println!("Hello, Rust!");\n    \n    // Example with user input (uncomment to use)\n    // println!("Enter your name:");\n    // let mut input = String::new();\n    // io::stdin().read_line(&mut input).expect("Failed to read line");\n    // println!("Hello, {}!", input.trim());\n}'},ruby:{name:"Ruby",extensions:[".rb"],defaultFileName:"main.rb",runCommand:"ruby {file}",hasCompileStep:!1,supportsInput:!0,template:'#!/usr/bin/env ruby\n# Ruby Code Runner Template\n\nputs "Hello, Ruby!"\n\n# Example with user input (uncomment to use)\n# print "Enter your name: "\n# name = gets.chomp\n# puts "Hello, #{name}!"'},php:{name:"PHP",extensions:[".php"],defaultFileName:"main.php",runCommand:"php {file}",hasCompileStep:!1,supportsInput:!0,template:'<?php\n// PHP Code Runner Template\n\necho "Hello, PHP!\\n";\n\n// Example with user input (uncomment to use)\n// echo "Enter your name: ";\n// $name = trim(fgets(STDIN));\n// echo "Hello, $name!\\n";\n?>'},csharp:{name:"C#",extensions:[".cs"],defaultFileName:"Program.cs",compileCommand:"csc",runCommand:"{executable}",hasCompileStep:!0,supportsInput:!0,template:'using System;\n\nnamespace CodeRunner\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine("Hello, C#!");\n            \n            // Example with user input (uncomment to use)\n            // Console.Write("Enter your name: ");\n            // string name = Console.ReadLine();\n            // Console.WriteLine($"Hello, {name}!");\n        }\n    }\n}'}},m=new Map;function g(n){const e=l.extname(n).toLowerCase();for(const[n,t]of Object.entries(d))if(t.extensions.includes(e))return n;return null}},317:n=>{n.exports=require("child_process")},398:n=>{n.exports=require("vscode")},857:n=>{n.exports=require("os")},896:n=>{n.exports=require("fs")},928:n=>{n.exports=require("path")}},e={},t=function t(o){var a=e[o];if(void 0!==a)return a.exports;var i=e[o]={exports:{}};return n[o].call(i.exports,i,i.exports,t),i.exports}(265);module.exports=t})();
//# sourceMappingURL=extension.js.map